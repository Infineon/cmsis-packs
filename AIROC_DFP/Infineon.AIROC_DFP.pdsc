<?xml version="1.0" encoding="UTF-8"?>
<package schemaVersion="1.6.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd">
  <vendor>Infineon</vendor>
  <name>AIROC_DFP</name>
  <description>Infineon CYW208xx Device Support</description>
  <url>https://github.com/Infineon/cmsis-packs/raw/master/AIROC_DFP/</url>
  <supportContact>https://www.infineon.com/support</supportContact>
  <license>APACHE_LICENSE.txt</license>
  <releases>
    <release version="1.0.0" date="2022-03-30">
      First Release version of AIROC Device Family Pack.
      Based on Infineon CYW208xx CMSIS Flash Loaders v1.0.0.206.
    </release>
  </releases>

  <keywords>
    <keyword>Infineon</keyword>
    <keyword>AIROC</keyword>
    <keyword>DFP</keyword>
  </keywords>

  <devices>
    <family Dfamily="CYW208xx" Dvendor="Infineon:7">
      <processor Pname="Cortex-M33" Dcore="Cortex-M33" DcoreVersion="r0p1" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="96000000" />
      <description>
        CYW208xx: Cortex-M33 MCU series with integrated analog and digital peripherals.
      </description>
      <book name="README.txt" title="Infineon AIROC DFP user guide"/>
      <book name="known_issues.txt" title="Infineon AIROC DFP known issues"/>
      <debug Pname="Cortex-M33"  __ap="1" defaultResetSequence="ResetSystem"/>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP->RDBUFF register
              // right after write to DP->CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged"/>
            <!-- CDBGRSTREQ on CYW20829 behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 1200ms.
              DAP_Delay(1200000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
        </sequence>
        <!-- DAP handshake -->
        <sequence name="DAP_Handshake">
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
          </block>
          <control while="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477" timeout="1200000">
            <!-- JTAG Protocol -->
            <control if="protType == 1">
              <control if="isSWJ">
                <block atomic="true">
                  // Ensure current debug interface is in reset state
                  DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                  // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                  // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                  DAP_SWJ_Sequence(16, 0xE73C);
                  // Ensure JTAG interface is reset
                  DAP_SWJ_Sequence(6, 0x3F);
                </block>
              </control>
              <block atomic="true">
                // JTAG "Soft" Reset
                DAP_JTAG_Sequence(6, 1, 0x3F);
                DAP_JTAG_Sequence(1, 0, 0x01);
                // Get IDCODE to make shure that JTAG-DP is available
                DAP_JTAG_Sequence(4, 0, 0x00);                          // 4*Run-Test/Idle
                DAP_JTAG_Sequence(2, 1, 0x00);                          // -> Select-DR -> Select-IR
                DAP_JTAG_Sequence(2, 0, 0x00);                          // -> Capture-IR -> Shift-IR
                DAP_JTAG_Sequence(7, 0, 0xFE);                          // Shift-IR (IDCODE BYPASS)
                DAP_JTAG_Sequence(2, 1, 0x01);                          // -> Exit1-IR (IDCODE BYPASS) -> Update-IR
                DAP_JTAG_Sequence(4, 0, 0x00);                          // Make sure that we go through Idle state in TAP controller
                DAP_JTAG_Sequence(1, 1, 0x00);                          // Select-DR
                DAP_JTAG_Sequence(2, 0, 0x00);                          // -> Capture-DR -> Shift-DR
                DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);           // Shift 33-bits data
                DAP_JTAG_Sequence(2, 1, 0x00);                          // -> Exit2-DR -> Update-DR
                DAP_JTAG_Sequence(4, 0, 0x00);                          // Make sure that we go through Idle state in TAP controller
              </block>
            </control>
            <!-- SWD Protocol -->
            <control if="protType == 2">
              <control if="isSWJ">
                <block atomic="true">
                  // Ensure current debug interface is in reset state
                  DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                  // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                  // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                  DAP_SWJ_Sequence(16, 0xE79E);
                  // Enter SWD Line Reset State
                  DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // &gt; 50 cycles SWDIO/TMS High
                  DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)
                </block>
              </control>
              <control if="!isSWJ">
                <block atomic="true">
                  // Enter SWD Line Reset State
                  DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // &gt; 50 cycles SWDIO/TMS High
                  DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)
                </block>
              </control>
              <!-- Note. The following block must be "atoming" to avoid using the cached result in case of an error occured. -->
              <block atomic="true">
                // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
                __errorcontrol = 1;
                DPIDR = ReadDP(0x0);
                __errorcontrol = 0;
              </block>
            </control>
          </control>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Capture VC_CORERESET bit of DEMCR register
            __var VC_CORERESET = (Read32(0xE000EDFC) &amp; 1);
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000"/>
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000"/>
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000"/>
          </control>
          <block>
            // Poll DP until bootloader CYW20829 allows access to device (can be up to 1200ms)
            sequence("DAP_Handshake");
            sequence("DebugPortStart");
            __var DHCSR_Addr   = 0xE000EDF0;
            __var DHCSR = Read32(DHCSR_Addr);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(DHCSR &amp; 0x02000000)" timeout="500000">
            <block>
              DHCSR = Read32(DHCSR_Addr);
            </block>
          </control>
          <!-- Check against C_DEBUGEN -->
          <control if="(DHCSR &amp; 0x00000001) != 0x00000001">
            <block>
              // Enables debug.
              Write32(DHCSR_Addr, 0xA05F0001);
              DHCSR = Read32(DHCSR_Addr);
            </block>
          </control>
          <!-- Check against S_SLEEP and !S_HALT -->
          <control if="(DHCSR &amp; 0x00060000) != 0x00020000">
            <block>
              // Core is sleeping (WFI, WFE or SLEEP-ON-EXIT) or just not halted. Must use C_HALT to gain control.
              Write32(DHCSR_Addr, 0xA05F0003);
            </block>
          </control>
          <!-- Check against halt was requested by VC_CORERESET bit -->
          <control if="VC_CORERESET == 0">
            <block>
              // Clear C_HALT if halt isn't requested.
              Write32(DHCSR_Addr, 0xA05F0001);
            </block>
          </control>
          <block>
            // Init AP CSW register
            WriteAP(0x00, 0x03000052);
          </block>
        </sequence>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Execute SYSRESETREQ via AIRCR
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;
            sequence("DAP_Handshake");
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000"/>
        </sequence>
      </sequences>
      <device Dname="CYW20829A0LKML">
        <compile   define="CYW20829A0LKML" />
        <debug     Pname="Cortex-M33" svd="SVD/cyw20829.svd"/>
        <memory    name="IRAM1"       access="rwx" start="0x20000000" size="0x20000" default="1"/>
        <memory    name="IROM1"       access="rx"  start="0x60000000" size="0x8000000" default="1" startup="1"/>

        <algorithm Pname="Cortex-M33" name="Flash/CYW208xx_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x20008100" RAMsize="0xFFF0" default ="1" style="Keil"/>
      </device>
      <device Dname="CYW20829A0KML">
        <compile   define="CYW20829A0KML" />
        <debug     Pname="Cortex-M33" svd="SVD/cyw20829.svd"/>
        <memory    name="IRAM1"       access="rwx" start="0x20000000" size="0x20000" default="1"/>
        <memory    name="IROM1"       access="rx"  start="0x60000000" size="0x8000000" default="1" startup="1"/>

        <algorithm Pname="Cortex-M33" name="Flash/CYW208xx_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x20008100" RAMsize="0xFFF0" default ="1" style="Keil"/>
      </device>
      <device Dname="CYW89829A0KML">
        <compile   define="CYW89829A0KML" />
        <debug     Pname="Cortex-M33" svd="SVD/cyw20829.svd"/>
        <memory    name="IRAM1"       access="rwx" start="0x20000000" size="0x20000" default="1"/>
        <memory    name="IROM1"       access="rx"  start="0x60000000" size="0x8000000" default="1" startup="1"/>

        <algorithm Pname="Cortex-M33" name="Flash/CYW208xx_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x20008100" RAMsize="0xFFF0" default ="1" style="Keil"/>
      </device>
    </family>
  </devices>

  <conditions>
    <condition id="CYW20829">
      <description>CYW20829 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYW20829A0LKML"/>
      <accept Dvendor="Infineon:7" Dname="CYW20829A0KML"/>
      <accept Dvendor="Infineon:7" Dname="CYW89829A0KML"/>
    </condition>
    <condition id="CYW208xx">
      <description>CYW208xx devices</description>
      <accept condition="CYW20829"/>
      <require Cclass="Device" Cgroup="Startup" />
    </condition>
  </conditions>

  <components>
    <component Cclass="Device" Cgroup="Startup" Cversion="1.0.0" condition="CYW208xx">
      <!-- This is a dummy startup implementation that emits a compiler error once
           this software component is enabled in the CMSIS RTE project configuration.
           It exists to silence PackChk WARNING M350: No 'Startup' component found.
           Refer to README.txt in the pack root directory for the guidance on the
           intended use of this CSMIS pack. -->
      <description>Dummy startup component, do not use</description>
      <files>
        <file category="doc" name="README.txt"/>
        <file category="source" name="Device/Source/startup_error.c" version="1.0.0"/>
      </files>
    </component>
  </components>
</package>
