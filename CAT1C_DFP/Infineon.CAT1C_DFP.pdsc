<?xml version="1.0" encoding="utf-8"?>
<package schemaVersion="1.6.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd">
  <vendor>Infineon</vendor>
  <name>CAT1C_DFP</name>
  <description>Infineon CAT1C (XMC7xxx, T2G) Device Support</description>
  <url>https://github.com/Infineon/cmsis-packs/raw/master/CAT1C_DFP/</url>
  <supportContact>https://www.infineon.com/support</supportContact>
  <license>APACHE_LICENSE.txt</license>
  <releases>
    <release version="1.0.0" date="2022-09-09">
      First Release version of CAT1C Device Family Pack.
      Based on Infineon CAT1C CMSIS Flash Loaders v1.0.0.103.
    </release>
  </releases>
  <keywords>
    <keyword>Infineon</keyword>
    <keyword>CAT1C</keyword>
    <keyword>DFP</keyword>
  </keywords>
  <devices>
    <!-- XMC7100 -->
    <family Dfamily="XMC7100" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        XMC7xxx: Dual-core Cortex-M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon XMC7xxx DFP user guide" />
      <book name="known_issues.txt" title="Infineon XMC7xxx DFP known issues" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c4m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c4m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x02;               // XMC7100 devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <!-- XMC7100: 1088KB Flash, Dual-Core -->
      <subFamily DsubFamily="XMC7100_x1088">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0x30000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x110000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_1088.FLM" start="0x10000000" size="0x00110000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_1088.FLM" start="0x10000000" size="0x00110000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7100-F100K1088">
          <compile define="XMC7100_F100K1088" />
        </device>
      </subFamily>
      <!-- XMC7100: 2112KB Flash, Dual-Core -->
      <subFamily DsubFamily="XMC7100_x2112">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0x60000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x210000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_2112.FLM" start="0x10000000" size="0x00210000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_2112.FLM" start="0x10000000" size="0x00210000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7100-F100K2112">
          <compile define="XMC7100_F100K2112" />
        </device>
        <device Dname="XMC7100-F144K2112">
          <compile define="XMC7100_F144K2112" />
        </device>
      </subFamily>
      <!-- XMC7100: 4160KB Flash, Dual-Core -->
      <subFamily DsubFamily="XMC7100_x4160">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0xC0000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x410000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7100-E272K4160">
          <compile define="XMC7100_E272K4160" />
        </device>
        <device Dname="XMC7100-F100K4160">
          <compile define="XMC7100_F100K4160" />
        </device>
        <device Dname="XMC7100-F144K4160">
          <compile define="XMC7100_F144K4160" />
        </device>
        <device Dname="XMC7100-F176K4160">
          <compile define="XMC7100_F176K4160" />
        </device>
      </subFamily>
    </family>
    <!-- XMC7100D -->
    <family Dfamily="XMC7100D" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <processor Pname="Cortex-M7-1" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        XMC7xxx: Tri-core Cortex-M7/M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon XMC7xxx DFP user guide" />
      <book name="known_issues.txt" title="Infineon XMC7xxx DFP known issues" />
      <debug Pname="Cortex-M7-1" svd="SVD/cat1c4m.svd" __ap="3" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c4m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c4m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x02;               // XMC7100 devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_1 core to ENABLED -->
        <sequence name="PowerUpCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_1 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020040C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_1 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_1 core  -->
        <sequence name="CheckPowerCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_1 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_1");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-1">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
        <sequence name="TraceStart" Pname="Cortex-M7-1">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x0000000C; // Enable slave ports #2 and #3 mask for CM7_1 core
            __var reg;
            // Temporary switch to CM7_0 core's AP
            __ap = 2;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Switch back to CM7_1 core's AP
            __ap = 3;
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <!-- XMC7100D: 2112KB Flash, Tri-Core -->
      <subFamily DsubFamily="XMC7100d_x2112">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0x60000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x210000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_2112.FLM" start="0x10000000" size="0x00210000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_2112.FLM" start="0x10000000" size="0x00210000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_2112.FLM" start="0x10000000" size="0x00210000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_WFLASH_128.FLM" start="0x14000000" size="0x00020000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7100D-F100K2112">
          <compile define="XMC7100D_F100K2112" />
        </device>
        <device Dname="XMC7100D-F144K2112">
          <compile define="XMC7100D_F144K2112" />
        </device>
      </subFamily>
      <!-- XMC7100D: 4160KB Flash, Tri-Core -->
      <subFamily DsubFamily="XMC7100d_x4160">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0xC0000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x410000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7100D-E272K4160">
          <compile define="XMC7100D_E272K4160" />
        </device>
        <device Dname="XMC7100D-F100K4160">
          <compile define="XMC7100D_F100K4160" />
        </device>
        <device Dname="XMC7100D-F144K4160">
          <compile define="XMC7100D_F144K4160" />
        </device>
        <device Dname="XMC7100D-F176K4160">
          <compile define="XMC7100D_F176K4160" />
        </device>
      </subFamily>
    </family>
    <!-- XMC7200 -->
    <family Dfamily="XMC7200" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="350000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        XMC7xxx: Dual-core Cortex-M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon XMC7xxx DFP user guide" />
      <book name="known_issues.txt" title="Infineon XMC7xxx DFP known issues" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c8m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c8m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x03;               // XMC7200 devices have 4 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <!-- XMC7200: 8384KB Flash, Dual-Core -->
      <subFamily DsubFamily="XMC7200_x8384">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0x100000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x830000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7200-E272K8384">
          <compile define="XMC7200_E272K8384" />
        </device>
        <device Dname="XMC7200-F176K8384">
          <compile define="XMC7200_F176K8384" />
        </device>
      </subFamily>
    </family>
    <!-- XMC7200D -->
    <family Dfamily="XMC7200D" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="350000000" />
      <processor Pname="Cortex-M7-1" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="350000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        XMC7xxx: Tri-core Cortex-M7/M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon XMC7xxx DFP user guide" />
      <book name="known_issues.txt" title="Infineon XMC7xxx DFP known issues" />
      <debug Pname="Cortex-M7-1" svd="SVD/cat1c8m.svd" __ap="3" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c8m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c8m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x03;               // XMC7200 devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_1 core to ENABLED -->
        <sequence name="PowerUpCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_1 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020040C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_1 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_1 core  -->
        <sequence name="CheckPowerCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_1 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_1");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-1">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
        <sequence name="TraceStart" Pname="Cortex-M7-1">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x0000000C; // Enable slave ports #2 and #3 mask for CM7_1 core
            __var reg;
            // Temporary switch to CM7_0 core's AP
            __ap = 2;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Switch back to CM7_1 core's AP
            __ap = 3;
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <!-- XMC7200D: 8384KB Flash, Tri-Core -->
      <subFamily DsubFamily="XMC7200d_x8384">
        <memory name="IRAM1" access="rwx" start="0x28000000" size="0x100000" default="1" />
        <memory name="IROM1" access="rx" start="0x10000000" size="0x830000" default="1" startup="1" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
        <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
        <device Dname="XMC7200D-E272K8384">
          <compile define="XMC7200D_E272K8384" />
        </device>
        <device Dname="XMC7200D-F176K8384">
          <compile define="XMC7200D_F176K8384" />
        </device>
      </subFamily>
    </family>
    <!-- CYT3BB: 4160KB Flash, Dual-Core -->
    <family Dfamily="CYT3BB" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        CYT3BB: Dual-core Cortex-M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon CAT1C DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT1C DFP known issues" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c4m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c4m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <memory name="IRAM1" access="rwx" start="0x28000000" size="0xC0000" default="1" />
      <memory name="IROM1" access="rx" start="0x10000000" size="0x410000" default="1" startup="1" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x02;               // CYT3BB devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <device Dname="CYT3BB5CEE">
        <compile define="CYT3BB5CEE" />
      </device>
      <device Dname="CYT3BB5CES">
        <compile define="CYT3BB5CES" />
      </device>
      <device Dname="CYT3BB7CEE">
        <compile define="CYT3BB7CEE" />
      </device>
      <device Dname="CYT3BB7CES">
        <compile define="CYT3BB7CES" />
      </device>
      <device Dname="CYT3BB8CEE">
        <compile define="CYT3BB8CEE" />
      </device>
      <device Dname="CYT3BB8CES">
        <compile define="CYT3BB8CES" />
      </device>
      <device Dname="CYT3BBBCEE">
        <compile define="CYT3BBBCEE" />
      </device>
      <device Dname="CYT3BBBCES">
        <compile define="CYT3BBBCES" />
      </device>
    </family>
    <!-- CYT4BB: 4160KB Flash, Tri-Core -->
    <family Dfamily="CYT4BB" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <processor Pname="Cortex-M7-1" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="250000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        CYT4BB: Tri-core Cortex-M7/M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon CAT1C DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT1C DFP known issues" />
      <debug Pname="Cortex-M7-1" svd="SVD/cat1c4m.svd" __ap="3" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c4m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c4m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <memory name="IRAM1" access="rwx" start="0x28000000" size="0xC0000" default="1" />
      <memory name="IROM1" access="rx" start="0x10000000" size="0x410000" default="1" startup="1" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_4160.FLM" start="0x10000000" size="0x00410000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x02;               // CYT4BB devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_1 core to ENABLED -->
        <sequence name="PowerUpCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_1 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020040C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_1 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_1 core  -->
        <sequence name="CheckPowerCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_1 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_1");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-1">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
        <sequence name="TraceStart" Pname="Cortex-M7-1">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x0000000C; // Enable slave ports #2 and #3 mask for CM7_1 core
            __var reg;
            // Temporary switch to CM7_0 core's AP
            __ap = 2;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Switch back to CM7_1 core's AP
            __ap = 3;
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <device Dname="CYT4BB5CEE">
        <compile define="CYT4BB5CEE" />
      </device>
      <device Dname="CYT4BB5CES">
        <compile define="CYT4BB5CES" />
      </device>
      <device Dname="CYT4BB7CEE">
        <compile define="CYT4BB7CEE" />
      </device>
      <device Dname="CYT4BB7CES">
        <compile define="CYT4BB7CES" />
      </device>
      <device Dname="CYT4BB8CEE">
        <compile define="CYT4BB8CEE" />
      </device>
      <device Dname="CYT4BB8CES">
        <compile define="CYT4BB8CES" />
      </device>
      <device Dname="CYT4BBBCEE">
        <compile define="CYT4BBBCEE" />
      </device>
      <device Dname="CYT4BBBCES">
        <compile define="CYT4BBBCES" />
      </device>
    </family>
    <!-- CYT4BF: 8384KB Flash, Tri-Core -->
    <family Dfamily="CYT4BF" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="50000000" />
      <processor Pname="Cortex-M7-0" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="350000000" />
      <processor Pname="Cortex-M7-1" Dcore="Cortex-M7" DcoreVersion="r1p2" Dfpu="SP_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="350000000" />
      <debugconfig default="swd" clock="2000000" sdf="Debug/cat1c.sdf" />
      <description>
        CYT4BF: Tri-core Cortex-M7/M7/M0+ MCU series with programmable digital and analog peripherals.
      </description>
      <book name="README.txt" title="Infineon CAT1C DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT1C DFP known issues" />
      <debug Pname="Cortex-M7-1" svd="SVD/cat1c8m.svd" __ap="3" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M7-0" svd="SVD/cat1c8m.svd" __ap="2" defaultResetSequence="ResetSystem" />
      <debug Pname="Cortex-M0p" svd="SVD/cat1c8m.svd" __ap="1" defaultResetSequence="ResetProcessor" />
      <memory name="IRAM1" access="rwx" start="0x28000000" size="0x100000" default="1" />
      <memory name="IROM1" access="rx" start="0x10000000" size="0x830000" default="1" startup="1" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M0p" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-0" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_8384.FLM" start="0x10000000" size="0x00830000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_WFLASH_256.FLM" start="0x14000000" size="0x00040000" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_USER.FLM" start="0x17000800" size="0x00000800" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_NAR.FLM" start="0x17001A00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_PKEY.FLM" start="0x17006400" size="0x00000C00" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SFLASH_TOC2.FLM" start="0x17007C00" size="0x00000200" RAMstart="0x28001000" RAMsize="0xFFF0" default="1" style="Keil" />
      <algorithm Pname="Cortex-M7-1" name="Flash/CAT1C_SMIF.FLM" start="0x60000000" size="0x08000000" RAMstart="0x28001000" RAMsize="0xFFF0" default="0" style="Keil" />
      <debugvars configfile="Debug/cat1c.dbgconf" version="1.0">
        __var __TPIU_pinlocation = 1;                      // Select one of the possible TPIU pin locations
        __var __TPIU_clocksetup = 1;                       // Enable(1) or Disable(0) setup of trace source clock
        __var __TPIU_clockdivval = 0;                      // Clock divider value for trace clock
        // TraceClock configuration data
        __var TRACE_CLOCK_CTL_ADDR = 0x40040C00;           // Clock control register for cpuss.clock_trace_in
        __var TRACE_CLOCK_DIV_CTL_ADDR = 0x40041020;       // Divider control (for 8.0 divider)
        __var TRACE_CLOCK_DIV_CMD_ADDR = 0x40040000;       // Divider command
        __var PERI_CLOCK_CTL_DIV_SEL = 0x03;               // CYT4BF devices have 3 of 8-bit dividers - use the lastest available for tracing
        __var PERI_DIV_PA_SEL_MASK = 0x000003FF;           // PA_TYPE_SEL + PA_DIV_SEL fields mask (size)
        __var PERI_DIV_CMD_PA_SEL_ROL = 0x00000010;        // PA_TYPE_SEL + PA_DIV_SEL fields offset in PERI_DIV_CMD
        // TPIU pins configuration data
        __var hsiomPrt21PortSel0Addr = 0x40300150;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 21 selection 0
        __var hsiomPrt22PortSel0Addr = 0x40300160;  // HSIOM_PRT[port]_PORT_SEL0路register路address. Port 22 selection 0
        __var gpioPrt21CfgAddr = 0x40310AC4;        // GPIO_PRT[port]_CFG register address. Port 21 configuration
        __var gpioPrt22CfgAddr = 0x40310B44;        // GPIO_PRT[port]_CFG register address. Port 22 configuration
        __var gpioPrt21CfgOutAddr = 0x40310ACC;     // GPIO_PRT[port]_CFG_OUT register address. Port 21 output buffer configuration
        __var gpioPrt22CfgOutAddr = 0x40310B4C;     // GPIO_PRT[port]_CFG_OUT register address. Port 22 output buffer configuration
      </debugvars>
      <sequences>
        <sequence name="DebugPortStart">
          <block info="Read DP CTRL/STAT">
            __var SW_DP_ABORT  = 0x0;
            __var DP_CTRL_STAT = 0x4;
            __var DP_SELECT    = 0x8;
            __var powered_down = 0;
            // Switch to DP Register Bank 0. Explicitly set APSEL to current AP selection
            WriteDP(DP_SELECT, __ap &lt;&lt; 24);
            // Read DP CTRL/STAT Register and check if CSYSPWRUPACK and CDBGPWRUPACK bits are set
            powered_down = ((ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000);
          </block>
          <control if="powered_down">
            <block info="Power Up System &amp; Debug">
              // Request Debug/System Power-Up
              // Ignore error here: even there is a polling in the next block, CMSIS-DAP transports reads DP.RDBUFF register
              // right after write to DP.CTRL_STAT. This will fail for some cases - for example if device is waking from DeepSleep.
              __errorcontrol = 1;
              WriteDP(DP_CTRL_STAT, 0x50000000);
              __errorcontrol = 0;
            </block>
            <!-- Wait for Power-Up Request to be acknowledged -->
            <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA0000000) != 0xA0000000" timeout="1000000" info="Wait for power acknowledged" />
            <!-- CDBGRSTREQ on CAT1C behaves like Power-On Reset. Not desired when starting the Debug Port
            <block info="Debug Reset">
              __errorcontrol = 1;
              // Request Debug Reset
              WriteDP(DP_CTRL_STAT, 0x54000000);
              // CDBGRSTREQ is equivalent to Power-On Reset and fully reboots the device.
              // Depending on the user application the reboot can take up to 600ms.
              DAP_Delay(600000);
              __errorcontrol = 0;
            </block>
            -->
            <!-- Wait for Debug Reset to be acknowledged, don't issue error on timeout to deal with improperly connected Debug Reset -->
            <!-- <control while="(ReadDP(DP_CTRL_STAT) &amp; 0xA8000000) != 0xA8000000" timeout="300000" info="Wait for Debug Reset Acknowledge"/> -->
            <!-- JTAG Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 1">
              <block info="JTAG: Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                // Additionally clear STICKYORUN, STICKYCMP, and STICKYERR bits by writing '1'
                WriteDP(DP_CTRL_STAT, 0x50000F32);
              </block>
            </control>
            <!-- SWD Specific Part of sequence -->
            <control if="(__protocol &amp; 0xFFFF) == 2">
              <block info="SWD: Init SWD &amp; Clear Sticky Bits">
                // Init AP Transfer Mode, Transaction Counter, and Lane Mask (Normal Transfer Mode, Include all Byte Lanes)
                WriteDP(DP_CTRL_STAT, 0x50000F00);
                // Clear WDATAERR, STICKYORUN, STICKYCMP, and STICKYERR bits of CTRL/STAT Register by write to ABORT register
                WriteDP(SW_DP_ABORT, 0x0000001E);
              </block>
            </control>
          </control>
          <control if="(__connection &amp; 3) == 2">
            <block>
              // Prepare MCU for flash operations
              Sequence("FlashPreparation");
            </block>
          </control>
          <control if="(__connection &amp; 3) == 1">
            <block>
              // Checking core readiness for debugging
              Sequence("DebuggingReadiness");
            </block>
          </control>
          <block>
            // Print device info
            Sequence("PrintDeviceInfo");
          </block>
        </sequence>
        <!-- HW Reset causes a reboot of the device which also resets debug.
             - Using this as a prereset is OK to potentially wake up the system from DeepSleep.
             - Using this in the middle of the debug session will break the connection unless recovery
               from a connection loss is supported by the debug IDE.
        -->
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;
            // Deassert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
          <block>
            // Give the bootloader time to finish (can be up to 600ms)
            DAP_Delay(600000);
          </block>
        </sequence>
        <sequence name="ResetSystem" Pname="Cortex-M0p">
          <block info="Halt CPU and determine application entry point">
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var BP_CTRL = 0xE0002000;
            __var BP_COMPx = 0xE0002008;
            __var DP_CTRL_STAT = 0x4;
            __var appValid = 0;
            __var vtBase = 0;
            __var resetAddress = 0;

            // Read VT_BASE register
            vtBase = Read32(0x40201120) &amp; 0xFFFF0000;
            appValid = (vtBase != 0) &amp;&amp; (vtBase != 0xFFFF0000);
          </block>
          <control if="appValid">
            <block info="Set BP at app entry and issue a reset">
              //Get application address at reset vector
              resetAddress = Read32(vtBase + 4);
            </block>
            <control if="(resetAddress != 0) &amp;&amp; (resetAddress != 0xFFFFFFFF)">
              <block>
                // Enable debug, and halt the CPU
                Write32(DHCSR_Addr, 0xA05F0003);

                // Enable Breakpoint unit using the BP_CTRL
                Write32(0xE0002000, 0x00000003);

                // Map the address bits to the breakpoint compare register
                resetAddress = (resetAddress &amp; 0x1FFFFFFC) | 0xC0000001;

                // Update the breakpoint compare register
                Write32(0xE0002008, resetAddress);

                // Issue software reset using the AIRCR (Application Interrupt and Reset
                // Control Register). Note: do not check for ACK_OK of this operation
                __errorcontrol = 1;
                Write32(AIRCR_Addr, 0x05FA0004);
                sequence("DAP_poll");
                __errorcontrol = 0;
              </block>
              <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
              <block>
                // Enable CM7 core(s) in order to be able to attach to it
                Sequence("DebuggingReadiness");
              </block>
            </control>
          </control>
        </sequence>
        <!-- Cortex-M0+ Processor reset via XMC7xxx CPU Sub-System Controller. Cortex-M0+ doesn't have VECTRESET. -->
        <sequence name="ResetProcessor" Pname="Cortex-M0p">
          <block>
            __var CPUSS_CM0_CTL_Addr = 0x40201000;    // CM0+ Control Register
            __var DHCSR_Addr = 0xE000EDF0;
            Write32(CPUSS_CM0_CTL_Addr, 0x05FA0000);  // Reset CM0+
          </block>
          <!-- Reset Recovery: Wait for CPUSS_CM0_CTL to  bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="500000" />
        </sequence>
        <!-- Prepare CM0+ core to serve SROM API calls -->
        <sequence name="PrepareCM0">
          <block>
            __var WFI_LOOP_ADDR = 0x28000000 + 0x800;
            __var CM0_SP_ADDR = WFI_LOOP_ADDR + 0x40;
            // Halt CM0+
              Write32(0xE000EDF0, 0xA05F0003);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00030000) != 0x00030000" timeout="1000000" info="Wait for core halts" />
          <block>
            // Write WFI loop in RAM
            Write32(WFI_LOOP_ADDR, 0xE7FDBF30);
            // Set VECTCLRACTIVE in AIRCR for CM0+
            Write32(0xE000ED0C, 0x05FA0002);
            // Write CM0+ xPSR
            Write32(0xE000EDF8, 0x01000000);
            Write32(0xE000EDF4, 0x00010010);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ CONTROL, PRIMASK
            Write32(0xE000EDF8, 0x00000000);
            Write32(0xE000EDF4, 0x00010014);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ PC
            Write32(0xE000EDF8, WFI_LOOP_ADDR);
            Write32(0xE000EDF4, 0x0001000F);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ SP
            Write32(0xE000EDF8, CM0_SP_ADDR);
            Write32(0xE000EDF4, 0x0001000D);
          </block>
          <control while="(Read32(0xE000EDF0) &amp; 0x00010000) != 0x00010000" timeout="1000000" info="Wait for register transfer to complete" />
          <block>
            // Write CM0+ VTOR
            Write32(0xE000ED08, 0x00000000);
            // Clear all pending interrupts in CM0+
            Write32(0xE000E280, 0x0000FFFF);
            // Enable only CM0+ IRQ0/1
            Write32(0xE000E180, 0xFFFFFFFC);
            Write32(0xE000E100, 0x00000003);
            // Set priority of IRQ0=1, IRQ1=0. Need to make sure IRQ1 is triggered even if IRQ0 is pending.
            Write32(0xE000E400, 0x00000040);
            // Release CM0+ from halt state
            Write32(0xE000EDF0, 0xA05F0001);
          </block>
        </sequence>
        <sequence name="DAP_Handshake">
          <!-- DAP_Handshake: Execute initial handshake sequence depend on selected protocol -->
          <block>
            __var isSWJ      = ((__protocol &amp; 0x00010000) != 0);
            __var protType   = __protocol &amp; 0x0000FFFF;
            __var DPIDR = 0;
            __Result = 0;
          </block>
          <!-- JTAG Protocol -->
          <control if="protType == 1">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence SWD to JTAG (0xE73C)
                // Change if SWJ-DP uses deprecated switch code (0xAEAE)
                DAP_SWJ_Sequence(16, 0xE73C);
              </block>
            </control>
            <block atomic="true">
              // JTAG "Soft" Reset
              DAP_JTAG_Sequence(6, 1, 0x00);                        // Test-Logic-Reset
              // Get IDCODE to make shure that JTAG-DP is available
              DAP_JTAG_Sequence(4, 0, 0x00);                        // 4*Run-Test/Idle
              DAP_JTAG_Sequence(2, 1, 0x00);                        // ~ Select-DR ~ Select-IR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-IR ~ Shift-IR
              DAP_JTAG_Sequence(8, 0, 0xFE);                        // Shift-IR (IDCODE BYPASS)
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-IR (IDCODE BYPASS) ~ Update-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
              DAP_JTAG_Sequence(1, 1, 0x00);                        // Select-DR
              DAP_JTAG_Sequence(2, 0, 0x00);                        // ~ Capture-DR ~ Shift-DR
              DPIDR = DAP_JTAG_Sequence(33, 0, 0x00000000);         // Shift 33-bits data
              DAP_JTAG_Sequence(5, 1, 0x00);                        // ~ Exit1-DR ~ Update-DR ~ ~ Select-DR ~ Select-IR ~ Test-Logic-Reset
              DAP_JTAG_Sequence(4, 0, 0x00);                        // Make sure that we go through Idle state in TAP controller
            </block>
          </control>
          <!-- SWD Protocol -->
          <control if="protType == 2">
            <control if="isSWJ">
              <block atomic="true">
                // Ensure current debug interface is in reset state
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
                // Execute SWJ-DP Switch Sequence JTAG to SWD (0xE79E)
                // Change if SWJ-DP uses deprecated switch code (0xEDB6)
                DAP_SWJ_Sequence(16, 0xE79E);
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <control if="!isSWJ">
              <block atomic="true">
                // Enter SWD Line Reset State
                DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); // More than 50 cycles SWDIO/TMS High
                DAP_SWJ_Sequence(3,  0x00);               // At least 2 idle cycles (SWDIO/TMS Low)
              </block>
            </control>
            <block>
              DPIDR = ReadDP(0x0); // Read DPIDR to enable SWD interface (SW-DPv1 and SW-DPv2)
            </block>
          </control>
          <control if="(DPIDR &amp; 0xFFF00FFF) != 0x6BA00477">
            <block>
              __Result = -1; // DAP is unavailable
            </block>
          </control>
        </sequence>
        <sequence name="DAP_poll">
          <!-- DAP_poll: Poll the DAP until it becomes available -->
          <block>
            __Result = -1; // Assume DAP is not available yet
          </block>
          <control while="__Result != 0" timeout="600000">
            <block>
              sequence("DAP_Handshake"); // Poll DP until bootloader allows access to device (can be up to 600ms)
            </block>
          </control>
          <control if="__Result != 0">
            <block>
              Message(1, "The Debug Access Port is unavailable.");
            </block>
          </control>
        </sequence>
        <!-- Enable CM7 clock -->
        <sequence name="EnableCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Write32(0x40261244, (CLK_ROOT_SELECT | 0x80000000));
              Message(0, "CLK_HF1 was enabled.");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_0 core to ENABLED -->
        <sequence name="PowerUpCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_0 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020000C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_0 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Check CM7 clock -->
        <sequence name="CheckCM7Clock">
          <block>
            __var CLK_ROOT_SELECT = Read32(0x40261244);
          </block>
          <control if="(CLK_ROOT_SELECT &amp; 0x80000000) != 0x80000000">
            <block>
              Message(2, "The CM7 core clock source (CLK_HF1) is not enabled by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_0 core  -->
        <sequence name="CheckPowerCM7_0">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201200;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_0 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Read and print device info -->
        <sequence name="PrintDeviceInfo">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var fbVerHi;
            __var protection;
            __var v;
            Message(0, "****************************************************");
            // Get Si Id, Family and Rev.
            v = Read32(0x17000000);
            siId = (v &amp; 0xFFFF0000) &gt;&gt; 16;
            siRev = (v &amp; 0x0000FF00) &gt;&gt; 8;
            v = Read32(0x1700000C);
            siFamily = v &amp; 0x00000FFF;
            Message(0, "** Silicon: 0x%04X, Family: 0x%03X, Rev.: 0x%02X", siId, siFamily, siRev);
            // Get FlashBboot verison
            fbVerHi = Read32(0x17002004);
          </block>
          <control if="fbVerHi == 0">
            <block>
              Message(1, "Invalid FlashBoot: High version word of Flash Boot is zero");
            </block>
          </control>
          <control if="fbVerHi != 0">
            <block>
              __var fbVerLo = Read32(0x17002018);
              __var b0 = fbVerHi &gt;&gt; 28;
              __var b1 = (fbVerHi &gt;&gt; 24) &amp; 0x0F;
              __var b2 = (fbVerHi &gt;&gt; 16) &amp; 0xFF;
              __var b3 = fbVerHi &amp; 0x0000FFFF;
            </block>
            <control if="b0 &gt; 2">
              <block>
                Message(1, "Unsupported Flash Boot Version - Flash Boot Version [31:28] = 0x%X", b0);
              </block>
            </control>
            <control if="b0 &lt;= 2">
              <control if="b3 != 0x8001">
                <block>
                  Message(1, "Flash Boot is corrupted or non Flash Boot image programmed");
                </block>
              </control>
              <control if="b3 == 0x8001">
                <!-- Versioning scheme #1 -->
                <control if="b0 == 0">
                  <control if="b1 == 1">
                    <block>
                      Message(0, "** Flash Boot version: 1.%02u", b2);
                    </block>
                  </control>
                  <control if="b1 == 2">
                    <control if="b2 &lt; 20">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.0.%u", b2);
                      </block>
                    </control>
                    <control if="(b2 &gt;= 20) &amp;&amp; (b2 &lt; 29)">
                      <block>
                        Message(0, "** Flash Boot version: 1.0.1.%u", b2);
                      </block>
                    </control>
                    <control if="b2 &gt;= 29">
                      <block>
                        Message(0, "** Flash Boot version: 1.20.1.%u", b2);
                      </block>
                    </control>
                  </control>
                </control>
                <!-- Versioning scheme #2 -->
                <control if="b0 == 1">
                  <block>
                    Message(0, "** Flash Boot version: 2.0.0.%u", b2);
                  </block>
                </control>
                <!-- Versioning scheme #3 -->
                <control if="b0 == 2">
                  <block>
                    __var patch = fbVerLo &gt;&gt; 24;
                    __var build = fbVerLo &amp; 0x0000FFFF;
                    Message(0, "** Flash Boot version: %u.%u.%u.%u", b1, b2, patch, build);
                  </block>
                </control>
              </control>
            </control>
          </control>
          <!-- Get life-cycle stage -->
          <control>
            <block>
              protection = Read32(0x402020C4);
            </block>
          </control>
          <!-- Decode life-cycle stage -->
          <control if="protection == 1">
            <block>
              Message(0, "** Chip Protection: VIRGIN");
            </block>
          </control>
          <control if="protection == 2">
            <block>
              Message(0, "** Chip Protection: NORMAL");
            </block>
          </control>
          <control if="protection == 3">
            <block>
              Message(0, "** Chip Protection: SECURE");
            </block>
          </control>
          <control if="protection == 4">
            <block>
              Message(0, "** Chip Protection: DEAD");
            </block>
          </control>
          <control if="(protection == 0) || (protection &gt; 4)">
            <block>
              Message(0, "** Chip Protection: UNKNOWN");
            </block>
          </control>
          <block>
            Message(0, "****************************************************");
          </block>
        </sequence>
        <sequence name="SetupTraceClock">
          <control if="__TPIU_clocksetup != 0">
            <block>
              __var PERI_CLOCK_CTL_DIV_SEL_MASK = 0x0000000F;                    // PERI_CLOCK_CTL.DIV_SEL
              __var PERI_DIV_CMD_ENABLE_MASK = 0x80000000;                       // ENABLE field in PERI_DIV_CMD
              __var PERI_DIV_CMD_DISABLE_MASK = 0x40000000;                      // DISABLE field in PERI_DIV_CMD
              // Peripheral clock divider index to use for trace clock
              __var ClockDivSel = PERI_CLOCK_CTL_DIV_SEL &amp; PERI_CLOCK_CTL_DIV_SEL_MASK;
              __var ClockDivVal = __TPIU_clockdivval &amp; PERI_DIV_PA_SEL_MASK; // Peripheral clock divider value for trace clock
                                                                                 // Actual divider is (1+ClockDivVal)
              __var ClockCtlVal = Read32(TRACE_CLOCK_CTL_ADDR);
              __var ClockDivCtlVal = Read32(TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4));
            </block>
            <control if="(ClockCtlVal != ClockDivSel) || (ClockDivCtlVal != ((ClockDivVal &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | 0x1))">
              <block>
                Message(0, "Setup TPIU clock, divider value is %u", ClockDivVal);
                // DISABLE 8.0 DIV in PERI_DIV_CMD:
                __var ClockDivCmd = PERI_DIV_CMD_DISABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
                // Use selected divider (8.0) for cpuss.clock_trace_in
                Write32(TRACE_CLOCK_CTL_ADDR, ClockDivSel);
                // Set 8.0 DIV = ClockDivVal
                Write32((TRACE_CLOCK_DIV_CTL_ADDR + (ClockDivSel * 4)), (ClockDivVal &lt;&lt; 8));
                // ENABLE 8.0 DIV
                ClockDivCmd = PERI_DIV_CMD_ENABLE_MASK | (PERI_DIV_PA_SEL_MASK &lt;&lt; PERI_DIV_CMD_PA_SEL_ROL) | ClockDivSel;
                Write32(TRACE_CLOCK_DIV_CMD_ADDR, ClockDivCmd);
              </block>
            </control>
          </control>
        </sequence>
        <!-- Configure pins trace pins if Parallel Trace Port enabled -->
        <sequence name="SetupTracePins">
          <control if="(__traceout &amp; 0x00000002) != 0" info="Parallel Trace Port enabled">
            <control if="__TPIU_pinlocation == 1" info="XMC72_EVK Kit like">
              <block>
                __var tpWidth = (__traceout &amp; 0x003F0000) &gt;&gt; 16;
                sequence("SetupTracePin_P22_4"); // TRACECLK
                sequence("SetupTracePin_P21_5"); // TRACEDATA[0]
              </block>
              <control if="tpWidth &gt; 1">
                <block>
                  sequence("SetupTracePin_P22_1"); // TRACEDATA[1]
                </block>
              </control>
              <control if="tpWidth &gt; 2">
                <block>
                  sequence("SetupTracePin_P22_2"); // TRACEDATA[2]
                  sequence("SetupTracePin_P22_3"); // TRACEDATA[3]
                </block>
              </control>
            </control>
          </control>
        </sequence>
        <!-- Setup Trace Pin 21_5 as TRACEDATA[0]  -->
        <sequence name="SetupTracePin_P21_5">
          <block>
            __var pin = 5;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P21_5)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt21PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt21CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt21CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt21CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[0] to P21_5");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_1 as TRACEDATA[1] -->
        <sequence name="SetupTracePin_P22_1">
          <block>
            __var pin = 1;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_1)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[1] to P22_1");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_2 as TRACEDATA[2] -->
        <sequence name="SetupTracePin_P22_2">
          <block>
            __var pin = 2;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_2)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[2] to P22_2");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_3 as TRACEDATA[3] -->
        <sequence name="SetupTracePin_P22_3">
          <block>
            __var pin = 3;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_data[0-3]' signals (P22_3)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACEDATA[3] to P22_3");
            </block>
          </control>
        </sequence>
        <!-- Setup Trace Pin P22_4 as TRACECLK -->
        <sequence name="SetupTracePin_P22_4">
          <block>
            __var pin = 4;                            // Pin number
            __var ioSelVal = 0x1B;                    // IO[pin]_SEL field value (connection) for HSIOM_PRT[port]_PORT_SEL register. Connection route for 'cpuss.trace_clock' signal (P22_4)
            __var reg0;
            __var reg1;
            __var offset;
            __var hsiomRegAddr; // Address of HSIOM_PRT[port]_PORT_SEL0 or HSIOM_PRT[port]_PORT_SEL1
            __var pMode = 6;  // pin drive mode
                              //  0: HIGHZ:         Output buffer is off creating a high impedance input (default)
                              //  1: RESERVED:      This mode is reserved and should not be used
                              //  2: PULLUP:        Resistive pull up
                              //  3: PULLDOWN:      Resistive pull down
                              //  4: OD_DRIVESLOW:  Open drain, drives low
                              //  5: OD_DRIVESHIGH: Open drain, drives high
                              //  6: STRONG:        Strong D_OUTput buffer
                              //  7: PULLUP_DOWN:   Pull up or pull down
            __var pSlew = 0;  // pin slew rate
                              //  0 - Fast slew rate (default)
                              //  1 - Slow slew rate
            __var pStrange = 2;   // pin drive strange
                                  //  0 - FULL_DRIVE:        Full drive strength: GPIO drives current at its max rated spec.
                                  //  1 - ONE_HALF_DRIVE:    1/2 drive strength: GPIO drives current at 1/2 of its max rated spec (default)
                                  //  2 - ONE_QUARTER_DRIVE: 1/4 drive strength: GPIO drives current at 1/4 of its max rated spec.
                                  //  3 - ONE_EIGHTH_DRIVE:  1/8 drive strength: GPIO drives current at 1/8 of its max rated spec.
            __var confChanged = 0; // Pin's configuration change flag
            __var PRT_IO_SEL_MASK = 0x1F;    // Mask for IO[pin]_SEL field in HSIOM_PRT[port]_PORT_SEL[0/1] register
            __var PRT_DRIVE_MODE_MASK = 0xF; // Mask for IN_EN[pin] and DRIVE_MODE[pin] fields in GPIO_PRT[port]_CFG register
            __var PRT_SLOW_MASK = 0x1;       // Mask for SLOW[pin] field in GPIO_PRT[port]_CFG_OUT register
            __var PRT_DRIVE_SEL_MASK = 0x3;  // Mask for DRIVE_SEL[pin] field in GPIO_PRT[port]_CFG_OUT register
          </block>
          <!-- Select pin route connection in HSIOM_PRT[port]_PORT_SEL[0/1] register -->
          <control if="pin &lt; 4">
            <block>
              // Pin[0-3] selection is in HSIOM_PRT[port]_PORT_SEL0 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr; // Use HSIOM_PRT[port]_PORT_SEL0
              offset = pin * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <control if="pin &gt; 3">
            <block>
              // Pin[4-7] selection is in HSIOM_PRT[port]_PORT_SEL1 register
              hsiomRegAddr = hsiomPrt22PortSel0Addr + 4; // Use HSIOM_PRT[port]_PORT_SEL1
              offset = (pin &amp; 3) * 8; // Offset of the IO[pin]_SEL field for required pin number,
                                      // where 8 = 5 bits for IO[pin]_SEL field + 3 not used bits
            </block>
          </control>
          <block>
            reg0 = Read32(hsiomRegAddr);
            reg1 = (reg0 &amp; ~(PRT_IO_SEL_MASK &lt;&lt; offset)) | (ioSelVal &lt;&lt; offset); // Update value in IO[pin]_SEL field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(hsiomRegAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Disable input buffer and set drive mode in GPIO_PRT[port]_CFG register -->
          <block>
            reg0 = Read32(gpioPrt22CfgAddr);
            offset = pin * 4;   // Offset of the DRIVE_MODE[pin] field for required pin number,
                                // where 4 = 3 bits for DRIVE_MODE[pin] + 1 bit for IN_EN fields
            reg1 = (reg0 &amp; ~(PRT_DRIVE_MODE_MASK &lt;&lt; offset)) | (pMode &lt;&lt; offset); // Update value in IN_EN[pin] and DRIVE_MODE[pin] fields
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <!-- Set slew rate and drive strength in GPIO_PRT[port]_CFG_OUT register -->
          <block>
            reg0 = Read32(gpioPrt22CfgOutAddr);
            offset = pin;
            reg1 = (reg0 &amp; ~(PRT_SLOW_MASK &lt;&lt; offset)) | (pSlew &lt;&lt; offset); // Update value in SLOW[pin] field
            offset = 16 + pin * 2; // Offset of the DRIVE_SEL[pin] field for required pin number,
                                   // where '16' is the offset of DRIVE_SEL[pin] for pin 0 and '2' is the size of DRIVE_SEL[pin]
            reg1 = (reg1 &amp; ~(PRT_DRIVE_SEL_MASK &lt;&lt; offset)) | (pStrange &lt;&lt; offset); // Update value in DRIVE_SEL[pin] field
          </block>
          <control if="reg0 |= reg1">
            <block>
              Write32(gpioPrt22CfgOutAddr, reg1);
              confChanged = 1;
            </block>
          </control>
          <control if="confChanged |= 0">
            <block>
              Message(0, "Set TRACECLK to P22_4");
            </block>
          </control>
        </sequence>
        <!-- Set power mode of CM7_1 core to ENABLED -->
        <sequence name="PowerUpCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              // Set power mode of CM7
              Write32(CM7_PWR_CTL_ADDR, 0x05FA0003);
              Message(0, "The power mode of Cortex-M7_1 core was set to ENABLED.");
            </block>
          </control>
          <!-- Set power mode of CM7 to ENABLED. The core will stop at reset vector -->
          <block>
            __var CPUSS_CM7_CTL_ADDR = 0x4020040C;
            __var CPUSS_CM7_CTL = Read32(CPUSS_CM7_CTL_ADDR);
          </block>
          <control if="CPUSS_CM7_CTL &amp; 0x10">
            <block>
              // Deassert CPU_WAIT
              Write32(CPUSS_CM7_CTL_ADDR, (CPUSS_CM7_CTL &amp; 0xFFFFFFEF));
              Message(0, "CPU_WAIT of Cortex-M7_1 core was deasserted.");
            </block>
          </control>
        </sequence>
        <!-- Make required steps for flash operations -->
        <sequence name="FlashPreparation">
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("PrepareCM0");
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
        </sequence>
        <!-- Check power mode of CM7_1 core  -->
        <sequence name="CheckPowerCM7_1">
          <block>
            __var CM7_PWR_CTL_ADDR = 0x40201210;
            __var CM7_PWR_CTL = Read32(CM7_PWR_CTL_ADDR);
          </block>
          <control if="(CM7_PWR_CTL &amp; 0x3) != 0x3">
            <block>
              Message(2, "The power mode of Cortex-M7_1 core was NOT ENABLED by the CM0+ application. Further debugging is not possible.");
            </block>
          </control>
        </sequence>
        <!-- Make sure that the application on CM0+ has prepared the CM7 core for debugging.  -->
        <sequence name="DebuggingReadiness">
          <control if="__ap == 1">
            <block>
              Sequence("EnableCM7Clock");
              Sequence("PowerUpCM7_0");
              Sequence("PowerUpCM7_1");
            </block>
          </control>
          <control if="__ap == 2">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_0");
            </block>
          </control>
          <control if="__ap == 3">
            <block>
              // Use CM0+ ap for nested sequences
              __ap = 1;
              Sequence("CheckCM7Clock");
              Sequence("CheckPowerCM7_1");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-0">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <sequence name="DebugCoreStart" Pname="Cortex-M7-1">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            // Enable Core Debug via DHCSR
            Write32(DHCSR_Addr, 0xA05F0001);
          </block>
          <!-- Enable clock to ETM block for proper ETM detection if Parallel Trace Port enabled and it is Debug session -->
          <control if="((__connection &amp; 0x00000001) != 0) &amp;&amp; ((__traceout &amp; 0x00000002) != 0)">
            <block>
              Sequence("SetupTraceClock");
            </block>
          </control>
        </sequence>
        <!-- Configure trace clock and pins -->
        <sequence name="TraceStart" Pname="Cortex-M7-0">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x00000003; // Enable slave ports #0 and #1 mask for CM7_0 core
            __var reg;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
        <sequence name="TraceStart" Pname="Cortex-M7-1">
          <block>
            __var CSTFCTL_Addr = 0xE008C000;
            __var CSTFCTL_Mask = 0x0000000C; // Enable slave ports #2 and #3 mask for CM7_1 core
            __var reg;
            // Temporary switch to CM7_0 core's AP
            __ap = 2;
            // Configure Coresight TF(Trace Funnel)
            reg = Read32(CSTFCTL_Addr);
            reg |= CSTFCTL_Mask;
            Write32(CSTFCTL_Addr, reg);
            // Switch back to CM7_1 core's AP
            __ap = 3;
            // Configure pins
            Sequence("SetupTracePins");
          </block>
        </sequence>
      </sequences>
      <device Dname="CYT4BF8CDE">
        <compile define="CYT4BF8CDE" />
      </device>
      <device Dname="CYT4BF8CDS">
        <compile define="CYT4BF8CDS" />
      </device>
      <device Dname="CYT4BF8CEE">
        <compile define="CYT4BF8CEE" />
      </device>
      <device Dname="CYT4BF8CES">
        <compile define="CYT4BF8CES" />
      </device>
      <device Dname="CYT4BFBCHE">
        <compile define="CYT4BFBCHE" />
      </device>
      <device Dname="CYT4BFBCHS">
        <compile define="CYT4BFBCHS" />
      </device>
      <device Dname="CYT4BFBCJE">
        <compile define="CYT4BFBCJE" />
      </device>
      <device Dname="CYT4BFBCJS">
        <compile define="CYT4BFBCJS" />
      </device>
      <device Dname="CYT4BFCCHE">
        <compile define="CYT4BFCCHE" />
      </device>
      <device Dname="CYT4BFCCHS">
        <compile define="CYT4BFCCHS" />
      </device>
      <device Dname="CYT4BFCCJE">
        <compile define="CYT4BFCCJE" />
      </device>
      <device Dname="CYT4BFCCJS">
        <compile define="CYT4BFCCJS" />
      </device>
    </family>
  </devices>
  <conditions>
    <condition id="CAT1C">
      <description>CAT1C devices</description>
      <accept condition="XMC7100" />
      <accept condition="XMC7100D" />
      <accept condition="XMC7200" />
      <accept condition="XMC7200D" />
      <accept condition="CYT3BB" />
      <accept condition="CYT4BB" />
      <accept condition="CYT4BF" />
      <require Cclass="Device" Cgroup="Startup" />
    </condition>
    <condition id="XMC7100">
      <description>XMC7100 devices</description>
      <accept Dvendor="Infineon:7" Dname="XMC7100-F100K1088" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-F100K2112" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-F144K2112" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-E272K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-F100K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-F144K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100-F176K4160" />
    </condition>
    <condition id="XMC7100D">
      <description>XMC7100D devices</description>
      <accept Dvendor="Infineon:7" Dname="XMC7100D-F100K2112" />
      <accept Dvendor="Infineon:7" Dname="XMC7100D-F144K2112" />
      <accept Dvendor="Infineon:7" Dname="XMC7100D-E272K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100D-F100K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100D-F144K4160" />
      <accept Dvendor="Infineon:7" Dname="XMC7100D-F176K4160" />
    </condition>
    <condition id="XMC7200">
      <description>XMC7200 devices</description>
      <accept Dvendor="Infineon:7" Dname="XMC7200-E272K8384" />
      <accept Dvendor="Infineon:7" Dname="XMC7200-F176K8384" />
    </condition>
    <condition id="XMC7200D">
      <description>XMC7200D devices</description>
      <accept Dvendor="Infineon:7" Dname="XMC7200D-E272K8384" />
      <accept Dvendor="Infineon:7" Dname="XMC7200D-F176K8384" />
    </condition>
    <condition id="CYT3BB">
      <description>CYT3BB devices</description>
      <accept Dvendor="Infineon:7" Dname="CYT3BB5CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT3BB5CES" />
      <accept Dvendor="Infineon:7" Dname="CYT3BB7CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT3BB7CES" />
      <accept Dvendor="Infineon:7" Dname="CYT3BB8CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT3BB8CES" />
      <accept Dvendor="Infineon:7" Dname="CYT3BBBCEE" />
      <accept Dvendor="Infineon:7" Dname="CYT3BBBCES" />
    </condition>
    <condition id="CYT4BB">
      <description>CYT4BB devices</description>
      <accept Dvendor="Infineon:7" Dname="CYT4BB5CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BB5CES" />
      <accept Dvendor="Infineon:7" Dname="CYT4BB7CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BB7CES" />
      <accept Dvendor="Infineon:7" Dname="CYT4BB8CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BB8CES" />
      <accept Dvendor="Infineon:7" Dname="CYT4BBBCEE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BBBCES" />
    </condition>
    <condition id="CYT4BF">
      <description>CYT4BF devices</description>
      <accept Dvendor="Infineon:7" Dname="CYT4BF8CDE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BF8CDS" />
      <accept Dvendor="Infineon:7" Dname="CYT4BF8CEE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BF8CES" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFBCHE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFBCHS" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFBCJE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFBCJS" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFCCHE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFCCHS" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFCCJE" />
      <accept Dvendor="Infineon:7" Dname="CYT4BFCCJS" />
    </condition>
  </conditions>
  <components>
    <component Cclass="Device" Cgroup="Startup" Cversion="1.0.0" condition="CAT1C">
      <!-- This is a dummy startup implementation that emits a compiler error once
           this software component is enabled in the CMSIS RTE project configuration.
           It exists to silence PackChk WARNING M350: No 'Startup' component found.
           Refer to README.txt in the pack root directory for the guidance on the
           intended use of this CSMIS pack. -->
      <description>Dummy startup component, do not use</description>
      <files>
        <file category="doc" name="README.txt" />
        <file category="source" name="Device/Source/startup_error.c" version="1.0.0" />
      </files>
    </component>
  </components>
</package>