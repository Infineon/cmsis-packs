<?xml version="1.0" encoding="utf-8"?>
<package schemaVersion="1.6.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd">
  <vendor>Infineon</vendor>
  <name>CAT2_DFP</name>
  <description>Infineon CAT2(CCG, PMG, PSoC4, WLC) Device Support</description>
  <url>https://github.com/Infineon/cmsis-packs/raw/master/CAT2_DFP/</url>
  <supportContact>https://www.infineon.com/support</supportContact>
  <license>APACHE_LICENSE.txt</license>
  <releases>
    <release version="1.3.0" date="2023-09-20">
      - Supported product lines: PSoC4, CCG, PMG, WLC

      - Changes:
        - Added new devices:
          - New PSoC4A MC MPNs
          - New WLC1 MPNs
          - New PSoC4AS4 MPNs
        - Updated CAT2 CMSIS Flash Loaders to v2.1.0.197: bugfixes, performance and stability improvements.
    </release>
    <release version="1.2.0" date="2023-03-01">
      - Supported product lines: PSoC4, CCG, PMG, WLC

      - Changes:
        - The vendor name and DeviceVendorEnum is changed from Cypress to Infineon.
        - Added new devices:
          - EZ-PD™ CCGx
          - EZ-PD™ PMGx
          - PSoC™ 4000T
          - PSoC™ 4500H
          - PSoC™ 4700S
          - WLCx
        - Added read and print of target device information.
        - Updated CAT2 CMSIS Flash Loaders to v2.1.0.194: bugfixes, performance and stability improvements.
    </release>
  </releases>
  <keywords>
    <keyword>Infineon</keyword>
    <keyword>CAT2</keyword>
    <keyword>CCG</keyword>
    <keyword>PMG</keyword>
    <keyword>PSoC4</keyword>
    <keyword>WLC</keyword>
    <keyword>DFP</keyword>
  </keywords>
  <devices>
    <!-- CCG7S (CYPD71XX): 128KB Flash, 16KB SRAM -->
    <family Dfamily="CCG7S" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>CCG7S devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/ccg7s.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPD7191-40LDXS">
        <compile define="CYPD7191_40LDXS" />
      </device>
      <device Dname="CYPD7171-40LQXQ">
        <compile define="CYPD7171_40LQXQ" />
      </device>
      <device Dname="CYPD7199-40LDXS">
        <compile define="CYPD7199_40LDXS" />
      </device>
    </family>
    <!-- CCG7D (CYPD72XX): 128KB Flash, 16KB SRAM -->
    <family Dfamily="CCG7D" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>CCG7D devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/ccg7d.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPD7291-68LDXS">
        <compile define="CYPD7291_68LDXS" />
      </device>
      <device Dname="CYPD7299-68LDXS">
        <compile define="CYPD7299_68LDXS" />
      </device>
      <device Dname="CYPD7271-68LQXQ">
        <compile define="CYPD7271_68LQXQ" />
      </device>
      <device Dname="CYPD7272-68LQXQ">
        <compile define="CYPD7272_68LQXQ" />
      </device>
      <device Dname="CYPD7273-68LQXQ">
        <compile define="CYPD7273_68LQXQ" />
      </device>
      <device Dname="CYPD7274-68LQXQ">
        <compile define="CYPD7274_68LQXQ" />
      </device>
      <device Dname="CYPD7275-68LQXQ">
        <compile define="CYPD7275_68LQXQ" />
      </device>
    </family>
    <!-- CCG8 (CYPD8XXX): 256KB Flash, 32KB SRAM -->
    <family Dfamily="CCG8" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>CCG8 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0p" svd="SVD/pmg1s3.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00040000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPD8225-97BZXIT">
        <compile define="CYPD8225_97BZXIT" />
      </device>
      <device Dname="CYPD8125-48LDXI">
        <compile define="CYPD8125_48LDXI" />
      </device>
    </family>
    <!-- CCG7S -->
    <!-- PMG1B1 (CYPM111x-xxx): 128KB Flash, 16KB SRAM -->
    <family Dfamily="PMG1-B1" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PMG1-B1 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/ccg7s.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPM1115-48LQXI">
        <compile define="CYPM1115_48LQXI" />
      </device>
      <device Dname="CYPM1116-48LQXI">
        <compile define="CYPM1116_48LQXI" />
      </device>
    </family>
    <!-- CCG3PA -->
    <!-- PMG1S0 (CYPM1011-xxx): 64KB Flash, 8KB SRAM -->
    <family Dfamily="PMG1-S0" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PMG1-S0 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/pmg1s0.svd" />
      <sequences>
        <sequence name="ResetCatchSet">
          <!--Vector catch is not working on this family -->
        </sequence>
        <sequence name="ResetSystem">
          <block info="Halt CPU and determine application entry point">
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var reset_addr = 0;
            __var reset_vector_addr = 0;
            __var app_is_valid = 0;

            // Enable debug, and halt the CPU
            Write32(DHCSR_Addr, 0xA05F0003);

            // Get address at reset vector
            reset_vector_addr = Read32(0x00000004);
            app_is_valid = reset_vector_addr &lt;= 0x40000;
          </block>
          <control if="app_is_valid">
            <block info="Set BP at app entry and issue a reset">
              // Enable Breakpoint unit
              Write32(0xE0002000, 0x00000003);

              // Map the address bits to the breakpoint compare register
              // bit map, set the enable breakpoint bit, and the match bits
              reset_addr = (reset_vector_addr &amp; 0x1FFFFFFC) | 0xC0000001;
              Write32(0xE0002008, reset_addr);

              // Issue software reset
              __errorcontrol = 1;
              Write32(AIRCR_Addr, 0x05FA0004);
              __errorcontrol = 0;
            </block>
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
               __var siid_offset;
               __var prot_offset;
               __var pid_0 = Read32(0xF0000FE0);
               __var pid_1 = Read32(0xF0000FE4);
               __var pid_2 = Read32(0xF0000FE8);
               __var pid_3 = Read32(0xF0000FEC);
               siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
               siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
               v = Read32(0x40110000);
               v = (v &gt;&gt; 22) &amp; 0x03;
               v = 64 * (v + 1);
            </block>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset | 0x0FFFF000);
              protection = Read32(prot_offset | 0x0FFFF000);
              protection = (protection &lt;&lt; 24) &amp; 0x0f;
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="protection &gt; 1">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPM1011-24LQXI">
        <compile define="CYPM1011_24LQXI" />
      </device>
    </family>
    <!-- CCG6 -->
    <!-- PMG1S1 (CYPM1111-xxx): 128KB Flash, 12KB SRAM -->
    <family Dfamily="PMG1-S1" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PMG1-S1 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/pmg1s1.svd" />
      <sequences>
        <sequence name="ResetCatchSet">
          <!--Vector catch is not working on this family -->
        </sequence>
        <sequence name="ResetSystem">
          <block info="Halt CPU and determine application entry point">
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var reset_addr = 0;
            __var reset_vector_addr = 0;
            __var app_is_valid = 0;

            // Enable debug, and halt the CPU
            Write32(DHCSR_Addr, 0xA05F0003);

            // Get address at reset vector
            reset_vector_addr = Read32(0x00000004);
            app_is_valid = reset_vector_addr &lt;= 0x40000;
          </block>
          <control if="app_is_valid">
            <block info="Set BP at app entry and issue a reset">
              // Enable Breakpoint unit
              Write32(0xE0002000, 0x00000003);

              // Map the address bits to the breakpoint compare register
              // bit map, set the enable breakpoint bit, and the match bits
              reset_addr = (reset_vector_addr &amp; 0x1FFFFFFC) | 0xC0000001;
              Write32(0xE0002008, reset_addr);

              // Issue software reset
              __errorcontrol = 1;
              Write32(AIRCR_Addr, 0x05FA0004);
              __errorcontrol = 0;
            </block>
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
               __var siid_offset;
               __var prot_offset;
               __var pid_0 = Read32(0xF0000FE0);
               __var pid_1 = Read32(0xF0000FE4);
               __var pid_2 = Read32(0xF0000FE8);
               __var pid_3 = Read32(0xF0000FEC);
               siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
               siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
               v = Read32(0x40110000);
               v = (v &gt;&gt; 22) &amp; 0x03;
               v = 64 * (v + 1);
            </block>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset | 0x0FFFF000);
              protection = Read32(prot_offset | 0x0FFFF000);
              protection = (protection &lt;&lt; 24) &amp; 0x0f;
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="protection &gt; 1">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00003000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPM1111-40LQXIT">
        <compile define="CYPM1111_40LQXIT" />
      </device>
    </family>
    <!-- CCG3 -->
    <!-- PMG1S2 (CYPM1211-xxx): 128KB Flash, 8KB SRAM -->
    <family Dfamily="PMG1-S2" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PMG1-S2 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/pmg1s2.svd" />
      <sequences>
        <sequence name="ResetCatchSet">
          <!--Vector catch is not working on this family -->
        </sequence>
        <sequence name="ResetSystem">
          <block info="Halt CPU and determine application entry point">
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var reset_addr = 0;
            __var reset_vector_addr = 0;
            __var app_is_valid = 0;

            // Enable debug, and halt the CPU
            Write32(DHCSR_Addr, 0xA05F0003);

            // Get address at reset vector
            reset_vector_addr = Read32(0x00000004);
            app_is_valid = reset_vector_addr &lt;= 0x40000;
          </block>
          <control if="app_is_valid">
            <block info="Set BP at app entry and issue a reset">
              // Enable Breakpoint unit
              Write32(0xE0002000, 0x00000003);

              // Map the address bits to the breakpoint compare register
              // bit map, set the enable breakpoint bit, and the match bits
              reset_addr = (reset_vector_addr &amp; 0x1FFFFFFC) | 0xC0000001;
              Write32(0xE0002008, reset_addr);

              // Issue software reset
              __errorcontrol = 1;
              Write32(AIRCR_Addr, 0x05FA0004);
              __errorcontrol = 0;
            </block>
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
               __var siid_offset;
               __var prot_offset;
               __var pid_0 = Read32(0xF0000FE0);
               __var pid_1 = Read32(0xF0000FE4);
               __var pid_2 = Read32(0xF0000FE8);
               __var pid_3 = Read32(0xF0000FEC);
               siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
               siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
               v = Read32(0x40110000);
               v = (v &gt;&gt; 22) &amp; 0x03;
               v = 64 * (v + 1);
            </block>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset | 0x0FFFF000);
              protection = Read32(prot_offset | 0x0FFFF000);
              protection = (protection &lt;&lt; 24) &amp; 0x0f;
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="protection &gt; 1">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPM1211-40LQXIT">
        <compile define="CYPM1211_40LQXIT" />
      </device>
      <device Dname="CYPM1211-42FNXIT">
        <compile define="CYPM1211_42FNXIT" />
      </device>
    </family>
    <!-- PMG1S3 -->
    <!-- PMG1S3 (CYPM1311-xxx): 256KB Flash, 32KB SRAM -->
    <family Dfamily="PMG1-S3" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PMG1-S3 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0p" svd="SVD/pmg1s3.svd" />
      <sequences>
        <sequence name="ResetCatchSet">
          <!--Vector catch is not working on this family -->
        </sequence>
        <sequence name="ResetSystem">
          <block info="Halt CPU and determine application entry point">
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var reset_addr = 0;
            __var reset_vector_addr = 0;
            __var app_is_valid = 0;

            // Enable debug, and halt the CPU
            Write32(DHCSR_Addr, 0xA05F0003);

            // Get address at reset vector
            reset_vector_addr = Read32(0x00000004);
            app_is_valid = reset_vector_addr &lt;= 0x40000;
          </block>
          <control if="app_is_valid">
            <block info="Set BP at app entry and issue a reset">
              // Enable Breakpoint unit
              Write32(0xE0002000, 0x00000003);

              // Map the address bits to the breakpoint compare register
              // bit map, set the enable breakpoint bit, and the match bits
              reset_addr = (reset_vector_addr &amp; 0x1FFFFFFC) | 0xC0000001;
              Write32(0xE0002008, reset_addr);

              // Issue software reset
              __errorcontrol = 1;
              Write32(AIRCR_Addr, 0x05FA0004);
              __errorcontrol = 0;
            </block>
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
               __var siid_offset;
               __var prot_offset;
               __var pid_0 = Read32(0xF0000FE0);
               __var pid_1 = Read32(0xF0000FE4);
               __var pid_2 = Read32(0xF0000FE8);
               __var pid_3 = Read32(0xF0000FEC);
               siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
               siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
               v = Read32(0x40110000);
               v = (v &gt;&gt; 22) &amp; 0x03;
               v = 64 * (v + 1);
            </block>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset | 0x0FFFF000);
              protection = Read32(prot_offset | 0x0FFFF000);
              protection = (protection &lt;&lt; 24) &amp; 0x0f;
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="protection &gt; 1">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00040000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="CYPM1322-97BZXIT">
        <compile define="CYPM1322_97BZXIT" />
      </device>
      <device Dname="CYPM1311-48LQXI">
        <compile define="CYPM1311_48LQXI" />
      </device>
      <device Dname="CYPM1321-97BZXIT">
        <compile define="CYPM1321_97BZXIT" />
      </device>
    </family>
    <!-- PSoC 4000S -->
    <family Dfamily="PSoC 4000S" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4000S devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4000s.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4000S (CY8C40x4xxx-S4xx): 16KB Flash, 2KB SRAM -->
      <subFamily DsubFamily="PSoC 4000S (CY8C40x4xxx-S4xx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00000800" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00004000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00004000" RAMstart="0x20000000" RAMsize="0x00000800" default="1" style="Keil" />
        <device Dname="CY8C4024FNI-S402">
          <compile define="CY8C4024FNI_S402" />
        </device>
        <device Dname="CY8C4024LQI-S401">
          <compile define="CY8C4024LQI_S401" />
        </device>
        <device Dname="CY8C4024LQI-S402">
          <compile define="CY8C4024LQI_S402" />
        </device>
        <device Dname="CY8C4024AZI-S403">
          <compile define="CY8C4024AZI_S403" />
        </device>
        <device Dname="CY8C4024FNI-S412">
          <compile define="CY8C4024FNI_S412" />
        </device>
        <device Dname="CY8C4024LQI-S411">
          <compile define="CY8C4024LQI_S411" />
        </device>
        <device Dname="CY8C4024LQI-S412">
          <compile define="CY8C4024LQI_S412" />
        </device>
        <device Dname="CY8C4024AZI-S413">
          <compile define="CY8C4024AZI_S413" />
        </device>
        <device Dname="CY8C4024LQI-S403">
          <compile define="CY8C4024LQI_S403" />
        </device>
        <device Dname="CY8C4024LQI-S413">
          <compile define="CY8C4024LQI_S413" />
        </device>
        <device Dname="CY8C4024LQA-S411">
          <compile define="CY8C4024LQA_S411" />
        </device>
        <device Dname="CY8C4024PVA-S411">
          <compile define="CY8C4024PVA_S411" />
        </device>
        <device Dname="CY8C4024PVA-S412">
          <compile define="CY8C4024PVA_S412" />
        </device>
        <device Dname="CY8C4024LQS-S411">
          <compile define="CY8C4024LQS_S411" />
        </device>
        <device Dname="CY8C4024PVS-S411">
          <compile define="CY8C4024PVS_S411" />
        </device>
        <device Dname="CY8C4024PVS-S412">
          <compile define="CY8C4024PVS_S412" />
        </device>
        <device Dname="CY8C4024AXI-S402">
          <compile define="CY8C4024AXI_S402" />
        </device>
        <device Dname="CY8C4024AXI-S412">
          <compile define="CY8C4024AXI_S412" />
        </device>
        <device Dname="CY8C4024AZQ-S413">
          <compile define="CY8C4024AZQ_S413" />
        </device>
      </subFamily>
      <!-- PSoC 4000S (CY8C40x5xxx-S4xx): 32KB Flash, 4KB SRAM -->
      <subFamily DsubFamily="PSoC 4000S (CY8C40x5xxx-S4xx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00001000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00008000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00008000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4025FNI-S402">
          <compile define="CY8C4025FNI_S402" />
        </device>
        <device Dname="CY8C4025LQI-S401">
          <compile define="CY8C4025LQI_S401" />
        </device>
        <device Dname="CY8C4025LQI-S402">
          <compile define="CY8C4025LQI_S402" />
        </device>
        <device Dname="CY8C4025AZI-S403">
          <compile define="CY8C4025AZI_S403" />
        </device>
        <device Dname="CY8C4025FNI-S412">
          <compile define="CY8C4025FNI_S412" />
        </device>
        <device Dname="CY8C4025LQI-S411">
          <compile define="CY8C4025LQI_S411" />
        </device>
        <device Dname="CY8C4025LQI-S412">
          <compile define="CY8C4025LQI_S412" />
        </device>
        <device Dname="CY8C4025AZI-S413">
          <compile define="CY8C4025AZI_S413" />
        </device>
        <device Dname="CY8C4045FNI-S412">
          <compile define="CY8C4045FNI_S412" />
        </device>
        <device Dname="CY8C4045LQI-S411">
          <compile define="CY8C4045LQI_S411" />
        </device>
        <device Dname="CY8C4045LQI-S412">
          <compile define="CY8C4045LQI_S412" />
        </device>
        <device Dname="CY8C4045AZI-S413">
          <compile define="CY8C4045AZI_S413" />
        </device>
        <device Dname="CY8C4025LQA-S411">
          <compile define="CY8C4025LQA_S411" />
        </device>
        <device Dname="CY8C4025PVA-S411">
          <compile define="CY8C4025PVA_S411" />
        </device>
        <device Dname="CY8C4025PVA-S412">
          <compile define="CY8C4025PVA_S412" />
        </device>
        <device Dname="CY8C4045LQA-S411">
          <compile define="CY8C4045LQA_S411" />
        </device>
        <device Dname="CY8C4045PVA-S411">
          <compile define="CY8C4045PVA_S411" />
        </device>
        <device Dname="CY8C4045PVA-S412">
          <compile define="CY8C4045PVA_S412" />
        </device>
        <device Dname="CY8C4025LQS-S411">
          <compile define="CY8C4025LQS_S411" />
        </device>
        <device Dname="CY8C4025PVS-S411">
          <compile define="CY8C4025PVS_S411" />
        </device>
        <device Dname="CY8C4025PVS-S412">
          <compile define="CY8C4025PVS_S412" />
        </device>
        <device Dname="CY8C4045LQS-S411">
          <compile define="CY8C4045LQS_S411" />
        </device>
        <device Dname="CY8C4045PVS-S411">
          <compile define="CY8C4045PVS_S411" />
        </device>
        <device Dname="CY8C4045PVS-S412">
          <compile define="CY8C4045PVS_S412" />
        </device>
        <device Dname="CY8C4025AXI-S402">
          <compile define="CY8C4025AXI_S402" />
        </device>
        <device Dname="CY8C4025AXI-S412">
          <compile define="CY8C4025AXI_S412" />
        </device>
        <device Dname="CY8C4045AXI-S412">
          <compile define="CY8C4045AXI_S412" />
        </device>
        <device Dname="CY8C4025LQI-S403">
          <compile define="CY8C4025LQI_S403" />
        </device>
        <device Dname="CY8C4025LQI-S413">
          <compile define="CY8C4025LQI_S413" />
        </device>
        <device Dname="CY8C4045LQI-S413">
          <compile define="CY8C4045LQI_S413" />
        </device>
        <device Dname="CY8C4025AZQ-S403">
          <compile define="CY8C4025AZQ_S403" />
        </device>
        <device Dname="CY8C4025AZQ-S413">
          <compile define="CY8C4025AZQ_S413" />
        </device>
        <device Dname="CY8C4045AZQ-S413">
          <compile define="CY8C4045AZQ_S413" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4000T -->
    <family Dfamily="PSoC 4000T" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4000T devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4000t.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4000T (CY8C40x5xxx-Txxx): 32KB Flash, 4KB SRAM -->
      <subFamily DsubFamily="PSoC 4000T (CY8C40x5xxx-Txxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00001000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00008000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00008000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4025LQI-T412">
          <compile define="CY8C4025LQI_T412" />
        </device>
        <device Dname="CY8C4025LQI-T411">
          <compile define="CY8C4025LQI_T411" />
        </device>
        <device Dname="CY8C4025FNI-T412">
          <compile define="CY8C4025FNI_T412" />
        </device>
        <device Dname="CY8C4045LQI-T412">
          <compile define="CY8C4045LQI_T412" />
        </device>
        <device Dname="CY8C4045LQI-T411">
          <compile define="CY8C4045LQI_T411" />
        </device>
        <device Dname="CY8C4045FNI-T412">
          <compile define="CY8C4045FNI_T412" />
        </device>
      </subFamily>
      <!-- PSoC 4000T (CY8C40x6xxx-Txxx): 64KB Flash, 8KB SRAM -->
      <subFamily DsubFamily="PSoC 4000T (CY8C40x6xxx-Txxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4026LQI-T412">
          <compile define="CY8C4026LQI_T412" />
        </device>
        <device Dname="CY8C4026LQI-T411">
          <compile define="CY8C4026LQI_T411" />
        </device>
        <device Dname="CY8C4026FNI-T412">
          <compile define="CY8C4026FNI_T412" />
        </device>
        <device Dname="CY8C4046LQI-T412">
          <compile define="CY8C4046LQI_T412" />
        </device>
        <device Dname="CY8C4046LQI-T411">
          <compile define="CY8C4046LQI_T411" />
        </device>
        <device Dname="CY8C4046FNI-T412">
          <compile define="CY8C4046FNI_T412" />
        </device>
        <device Dname="CY8C4046LQI-T452">
          <compile define="CY8C4046LQI_T452" />
        </device>
        <device Dname="CY8C4046LQI-T451">
          <compile define="CY8C4046LQI_T451" />
        </device>
        <device Dname="CY8C4046FNI-T452">
          <compile define="CY8C4046FNI_T452" />
        </device>
        <device Dname="CY8C4046LQIN-T451">
          <compile define="CY8C4046LQIN_T451" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4100S -->
    <family Dfamily="PSoC 4100S" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4100S devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4100s.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4100S (CY8C41x4xxx-Sxxx): 16KB Flash, 4KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S (CY8C41x4xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00001000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00004000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00004000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4124FNI-S403">
          <compile define="CY8C4124FNI_S403" />
        </device>
        <device Dname="CY8C4124FNI-S413">
          <compile define="CY8C4124FNI_S413" />
        </device>
        <device Dname="CY8C4124LQI-S412">
          <compile define="CY8C4124LQI_S412" />
        </device>
        <device Dname="CY8C4124LQI-S413">
          <compile define="CY8C4124LQI_S413" />
        </device>
        <device Dname="CY8C4124AZI-S413">
          <compile define="CY8C4124AZI_S413" />
        </device>
        <device Dname="CY8C4124FNI-S433">
          <compile define="CY8C4124FNI_S433" />
        </device>
        <device Dname="CY8C4124FNQ-S433">
          <compile define="CY8C4124FNQ_S433" />
        </device>
        <device Dname="CY8C4124LQI-S432">
          <compile define="CY8C4124LQI_S432" />
        </device>
        <device Dname="CY8C4124LQI-S433">
          <compile define="CY8C4124LQI_S433" />
        </device>
        <device Dname="CY8C4124AZI-S433">
          <compile define="CY8C4124AZI_S433" />
        </device>
        <device Dname="CY8C4124PVA-S412">
          <compile define="CY8C4124PVA_S412" />
        </device>
        <device Dname="CY8C4124LQA-S413">
          <compile define="CY8C4124LQA_S413" />
        </device>
        <device Dname="CY8C4124PVA-S432">
          <compile define="CY8C4124PVA_S432" />
        </device>
        <device Dname="CY8C4124LQA-S423">
          <compile define="CY8C4124LQA_S423" />
        </device>
        <device Dname="CY8C4124LQA-S433">
          <compile define="CY8C4124LQA_S433" />
        </device>
        <device Dname="CY8C4124PVS-S412">
          <compile define="CY8C4124PVS_S412" />
        </device>
        <device Dname="CY8C4124LQS-S413">
          <compile define="CY8C4124LQS_S413" />
        </device>
        <device Dname="CY8C4124PVS-S432">
          <compile define="CY8C4124PVS_S432" />
        </device>
        <device Dname="CY8C4124LQS-S433">
          <compile define="CY8C4124LQS_S433" />
        </device>
        <device Dname="CY8C4124PVE-S412">
          <compile define="CY8C4124PVE_S412" />
        </device>
        <device Dname="CY8C4124LQE-S413">
          <compile define="CY8C4124LQE_S413" />
        </device>
        <device Dname="CY8C4124PVE-S432">
          <compile define="CY8C4124PVE_S432" />
        </device>
        <device Dname="CY8C4124LQE-S433">
          <compile define="CY8C4124LQE_S433" />
        </device>
        <device Dname="CY8C4124PVA-S422">
          <compile define="CY8C4124PVA_S422" />
        </device>
        <device Dname="CY8C4124PVS-S422">
          <compile define="CY8C4124PVS_S422" />
        </device>
        <device Dname="CY8C4124PVE-S422">
          <compile define="CY8C4124PVE_S422" />
        </device>
        <device Dname="CY8C4124LQS-S423">
          <compile define="CY8C4124LQS_S423" />
        </device>
        <device Dname="CY8C4124LQE-S423">
          <compile define="CY8C4124LQE_S423" />
        </device>
      </subFamily>
      <!-- PSoC 4100S (CY8C41x5xxx-Sxxx): 32KB Flash, 4KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S (CY8C41x5xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00001000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00008000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00008000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4125FNI-S423">
          <compile define="CY8C4125FNI_S423" />
        </device>
        <device Dname="CY8C4125LQI-S422">
          <compile define="CY8C4125LQI_S422" />
        </device>
        <device Dname="CY8C4125LQI-S423">
          <compile define="CY8C4125LQI_S423" />
        </device>
        <device Dname="CY8C4125AZI-S423">
          <compile define="CY8C4125AZI_S423" />
        </device>
        <device Dname="CY8C4125FNI-S413">
          <compile define="CY8C4125FNI_S413" />
        </device>
        <device Dname="CY8C4125LQI-S412">
          <compile define="CY8C4125LQI_S412" />
        </device>
        <device Dname="CY8C4125LQI-S413">
          <compile define="CY8C4125LQI_S413" />
        </device>
        <device Dname="CY8C4125AZI-S413">
          <compile define="CY8C4125AZI_S413" />
        </device>
        <device Dname="CY8C4125FNI-S433">
          <compile define="CY8C4125FNI_S433" />
        </device>
        <device Dname="CY8C4125FNQ-S433">
          <compile define="CY8C4125FNQ_S433" />
        </device>
        <device Dname="CY8C4125LQI-S432">
          <compile define="CY8C4125LQI_S432" />
        </device>
        <device Dname="CY8C4125LQI-S433">
          <compile define="CY8C4125LQI_S433" />
        </device>
        <device Dname="CY8C4125AZI-S433">
          <compile define="CY8C4125AZI_S433" />
        </device>
        <device Dname="CY8C4125AXI-S423">
          <compile define="CY8C4125AXI_S423" />
        </device>
        <device Dname="CY8C4125AXI-S433">
          <compile define="CY8C4125AXI_S433" />
        </device>
        <device Dname="CY8C4145AZI-S423">
          <compile define="CY8C4145AZI_S423" />
        </device>
        <device Dname="CY8C4145AXI-S423">
          <compile define="CY8C4145AXI_S423" />
        </device>
        <device Dname="CY8C4145AXI-S433">
          <compile define="CY8C4145AXI_S433" />
        </device>
        <device Dname="CY8C4125PVA-S412">
          <compile define="CY8C4125PVA_S412" />
        </device>
        <device Dname="CY8C4125LQA-S413">
          <compile define="CY8C4125LQA_S413" />
        </device>
        <device Dname="CY8C4125PVA-S432">
          <compile define="CY8C4125PVA_S432" />
        </device>
        <device Dname="CY8C4125LQA-S433">
          <compile define="CY8C4125LQA_S433" />
        </device>
        <device Dname="CY8C4125PVS-S412">
          <compile define="CY8C4125PVS_S412" />
        </device>
        <device Dname="CY8C4125LQS-S413">
          <compile define="CY8C4125LQS_S413" />
        </device>
        <device Dname="CY8C4125PVS-S432">
          <compile define="CY8C4125PVS_S432" />
        </device>
        <device Dname="CY8C4125LQS-S433">
          <compile define="CY8C4125LQS_S433" />
        </device>
        <device Dname="CY8C4125PVE-S412">
          <compile define="CY8C4125PVE_S412" />
        </device>
        <device Dname="CY8C4125LQE-S413">
          <compile define="CY8C4125LQE_S413" />
        </device>
        <device Dname="CY8C4125PVE-S432">
          <compile define="CY8C4125PVE_S432" />
        </device>
        <device Dname="CY8C4125LQE-S433">
          <compile define="CY8C4125LQE_S433" />
        </device>
        <device Dname="CY8C4125PVA-S422">
          <compile define="CY8C4125PVA_S422" />
        </device>
        <device Dname="CY8C4125PVS-S422">
          <compile define="CY8C4125PVS_S422" />
        </device>
        <device Dname="CY8C4125PVE-S422">
          <compile define="CY8C4125PVE_S422" />
        </device>
        <device Dname="CY8C4125LQA-S423">
          <compile define="CY8C4125LQA_S423" />
        </device>
        <device Dname="CY8C4125LQS-S423">
          <compile define="CY8C4125LQS_S423" />
        </device>
        <device Dname="CY8C4125LQE-S423">
          <compile define="CY8C4125LQE_S423" />
        </device>
        <device Dname="CY8C4125AZQ-S433">
          <compile define="CY8C4125AZQ_S433" />
        </device>
        <device Dname="CY8C4145AZQ-S433">
          <compile define="CY8C4145AZQ_S433" />
        </device>
        <device Dname="CY8C4145AXQ-S433">
          <compile define="CY8C4145AXQ_S433" />
        </device>
        <device Dname="CY8C4125LQQ-S432">
          <compile define="CY8C4125LQQ_S432" />
        </device>
      </subFamily>
      <!-- PSoC 4100S (CY8C41x6xxx-Sxxx): 64KB Flash, 8KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S (CY8C41x6xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4146FNI-S423">
          <compile define="CY8C4146FNI_S423" />
        </device>
        <device Dname="CY8C4146LQI-S422">
          <compile define="CY8C4146LQI_S422" />
        </device>
        <device Dname="CY8C4146LQI-S423">
          <compile define="CY8C4146LQI_S423" />
        </device>
        <device Dname="CY8C4146AZI-S423">
          <compile define="CY8C4146AZI_S423" />
        </device>
        <device Dname="CY8C4146FNI-S433">
          <compile define="CY8C4146FNI_S433" />
        </device>
        <device Dname="CY8C4146FNQ-S433">
          <compile define="CY8C4146FNQ_S433" />
        </device>
        <device Dname="CY8C4146LQI-S432">
          <compile define="CY8C4146LQI_S432" />
        </device>
        <device Dname="CY8C4146LQI-S433">
          <compile define="CY8C4146LQI_S433" />
        </device>
        <device Dname="CY8C4146AZI-S433">
          <compile define="CY8C4146AZI_S433" />
        </device>
        <device Dname="CY8C4146FNI-S443">
          <compile define="CY8C4146FNI_S443" />
        </device>
        <device Dname="CY8C4126AZI-S423">
          <compile define="CY8C4126AZI_S423" />
        </device>
        <device Dname="CY8C4126AZI-S433">
          <compile define="CY8C4126AZI_S433" />
        </device>
        <device Dname="CY8C4126AXI-S423">
          <compile define="CY8C4126AXI_S423" />
        </device>
        <device Dname="CY8C4126AXI-S433">
          <compile define="CY8C4126AXI_S433" />
        </device>
        <device Dname="CY8C4146AXI-S423">
          <compile define="CY8C4146AXI_S423" />
        </device>
        <device Dname="CY8C4146AXI-S433">
          <compile define="CY8C4146AXI_S433" />
        </device>
        <device Dname="CY8C4146PVA-S422">
          <compile define="CY8C4146PVA_S422" />
        </device>
        <device Dname="CY8C4146PVA-S432">
          <compile define="CY8C4146PVA_S432" />
        </device>
        <device Dname="CY8C4146LQA-S433">
          <compile define="CY8C4146LQA_S433" />
        </device>
        <device Dname="CY8C4146PVS-S422">
          <compile define="CY8C4146PVS_S422" />
        </device>
        <device Dname="CY8C4146PVS-S432">
          <compile define="CY8C4146PVS_S432" />
        </device>
        <device Dname="CY8C4146LQS-S433">
          <compile define="CY8C4146LQS_S433" />
        </device>
        <device Dname="CY8C4146PVE-S422">
          <compile define="CY8C4146PVE_S422" />
        </device>
        <device Dname="CY8C4146PVE-S432">
          <compile define="CY8C4146PVE_S432" />
        </device>
        <device Dname="CY8C4146LQE-S433">
          <compile define="CY8C4146LQE_S433" />
        </device>
        <device Dname="CY8C4146LQA-S423">
          <compile define="CY8C4146LQA_S423" />
        </device>
        <device Dname="CY8C4146LQS-S423">
          <compile define="CY8C4146LQS_S423" />
        </device>
        <device Dname="CY8C4146LQE-S423">
          <compile define="CY8C4146LQE_S423" />
        </device>
        <device Dname="CY8C4126AZQ-S423">
          <compile define="CY8C4126AZQ_S423" />
        </device>
        <device Dname="CY8C4126AZQ-S433">
          <compile define="CY8C4126AZQ_S433" />
        </device>
        <device Dname="CY8C4146AZQ-S423">
          <compile define="CY8C4146AZQ_S423" />
        </device>
        <device Dname="CY8C4146AZQ-S433">
          <compile define="CY8C4146AZQ_S433" />
        </device>
        <device Dname="CY8C4126AXQ-S433">
          <compile define="CY8C4126AXQ_S433" />
        </device>
        <device Dname="CY8C4146AXQ-S423">
          <compile define="CY8C4146AXQ_S423" />
        </device>
        <device Dname="CY8C4146AXQ-S433">
          <compile define="CY8C4146AXQ_S433" />
        </device>
        <device Dname="CY8C4146LQQ-S422">
          <compile define="CY8C4146LQQ_S422" />
        </device>
        <device Dname="CY8C4146LQQ-S432">
          <compile define="CY8C4146LQQ_S432" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4100SP -->
    <family Dfamily="PSoC 4100S Plus" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4100S Plus devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4100sp.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4100S Plus (CY8C41x6xxx-Sxxx): 64KB Flash, 8KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Plus (CY8C41x6xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4126AXI-S443">
          <compile define="CY8C4126AXI_S443" />
        </device>
        <device Dname="CY8C4126AZI-S445">
          <compile define="CY8C4126AZI_S445" />
        </device>
        <device Dname="CY8C4126AXI-S445">
          <compile define="CY8C4126AXI_S445" />
        </device>
        <device Dname="CY8C4126AZI-S455">
          <compile define="CY8C4126AZI_S455" />
        </device>
        <device Dname="CY8C4126AXI-S455">
          <compile define="CY8C4126AXI_S455" />
        </device>
        <device Dname="CY8C4146AXI-S443">
          <compile define="CY8C4146AXI_S443" />
        </device>
        <device Dname="CY8C4146AZI-S445">
          <compile define="CY8C4146AZI_S445" />
        </device>
        <device Dname="CY8C4146AXI-S445">
          <compile define="CY8C4146AXI_S445" />
        </device>
        <device Dname="CY8C4146AXI-S453">
          <compile define="CY8C4146AXI_S453" />
        </device>
        <device Dname="CY8C4146AZI-S455">
          <compile define="CY8C4146AZI_S455" />
        </device>
        <device Dname="CY8C4146AXI-S455">
          <compile define="CY8C4146AXI_S455" />
        </device>
        <device Dname="CY8C4126AZA-S455">
          <compile define="CY8C4126AZA_S455" />
        </device>
        <device Dname="CY8C4146AZA-S455">
          <compile define="CY8C4146AZA_S455" />
        </device>
        <device Dname="CY8C4126AZS-S455">
          <compile define="CY8C4126AZS_S455" />
        </device>
        <device Dname="CY8C4146AZS-S455">
          <compile define="CY8C4146AZS_S455" />
        </device>
        <device Dname="CY8C4146AZA-S245">
          <compile define="CY8C4146AZA_S245" />
        </device>
        <device Dname="CY8C4146AZA-S255">
          <compile define="CY8C4146AZA_S255" />
        </device>
        <device Dname="CY8C4146AZA-S265">
          <compile define="CY8C4146AZA_S265" />
        </device>
        <device Dname="CY8C4146AZA-S275">
          <compile define="CY8C4146AZA_S275" />
        </device>
        <device Dname="CY8C4146AZS-S245">
          <compile define="CY8C4146AZS_S245" />
        </device>
        <device Dname="CY8C4146AZS-S255">
          <compile define="CY8C4146AZS_S255" />
        </device>
        <device Dname="CY8C4146AZS-S265">
          <compile define="CY8C4146AZS_S265" />
        </device>
        <device Dname="CY8C4146AZS-S275">
          <compile define="CY8C4146AZS_S275" />
        </device>
        <device Dname="CY8C4146AZI-S443">
          <compile define="CY8C4146AZI_S443" />
        </device>
        <device Dname="CY8C4146AZI-S453">
          <compile define="CY8C4146AZI_S453" />
        </device>
        <device Dname="CY8C4146AZI-S463">
          <compile define="CY8C4146AZI_S463" />
        </device>
        <device Dname="CY8C4146AZQ-S445">
          <compile define="CY8C4146AZQ_S445" />
        </device>
        <device Dname="CY8C4146AZQ-S455">
          <compile define="CY8C4146AZQ_S455" />
        </device>
        <device Dname="CY8C4126AZE-S455">
          <compile define="CY8C4126AZE_S455" />
        </device>
        <device Dname="CY8C4146AZE-S245">
          <compile define="CY8C4146AZE_S245" />
        </device>
        <device Dname="CY8C4146AZE-S255">
          <compile define="CY8C4146AZE_S255" />
        </device>
        <device Dname="CY8C4146AZE-S265">
          <compile define="CY8C4146AZE_S265" />
        </device>
        <device Dname="CY8C4146AZE-S275">
          <compile define="CY8C4146AZE_S275" />
        </device>
        <device Dname="CY8C4146AZE-S455">
          <compile define="CY8C4146AZE_S455" />
        </device>
        <device Dname="CY8C4126LQA-S453">
          <compile define="CY8C4126LQA_S453" />
        </device>
        <device Dname="CY8C4146LQA-S243">
          <compile define="CY8C4146LQA_S243" />
        </device>
        <device Dname="CY8C4146LQA-S253">
          <compile define="CY8C4146LQA_S253" />
        </device>
        <device Dname="CY8C4146LQA-S263">
          <compile define="CY8C4146LQA_S263" />
        </device>
        <device Dname="CY8C4146LQA-S273">
          <compile define="CY8C4146LQA_S273" />
        </device>
        <device Dname="CY8C4146LQA-S453">
          <compile define="CY8C4146LQA_S453" />
        </device>
        <device Dname="CY8C4126LQS-S453">
          <compile define="CY8C4126LQS_S453" />
        </device>
        <device Dname="CY8C4146LQS-S243">
          <compile define="CY8C4146LQS_S243" />
        </device>
        <device Dname="CY8C4146LQS-S253">
          <compile define="CY8C4146LQS_S253" />
        </device>
        <device Dname="CY8C4146LQS-S263">
          <compile define="CY8C4146LQS_S263" />
        </device>
        <device Dname="CY8C4146LQS-S273">
          <compile define="CY8C4146LQS_S273" />
        </device>
        <device Dname="CY8C4146LQS-S453">
          <compile define="CY8C4146LQS_S453" />
        </device>
        <device Dname="CY8C4126LQE-S453">
          <compile define="CY8C4126LQE_S453" />
        </device>
        <device Dname="CY8C4146LQE-S243">
          <compile define="CY8C4146LQE_S243" />
        </device>
        <device Dname="CY8C4146LQE-S253">
          <compile define="CY8C4146LQE_S253" />
        </device>
        <device Dname="CY8C4146LQE-S263">
          <compile define="CY8C4146LQE_S263" />
        </device>
        <device Dname="CY8C4146LQE-S273">
          <compile define="CY8C4146LQE_S273" />
        </device>
        <device Dname="CY8C4146LQE-S453">
          <compile define="CY8C4146LQE_S453" />
        </device>
        <device Dname="CY8C4126LQA-S455">
          <compile define="CY8C4126LQA_S455" />
        </device>
        <device Dname="CY8C4146LQA-S245">
          <compile define="CY8C4146LQA_S245" />
        </device>
        <device Dname="CY8C4146LQA-S255">
          <compile define="CY8C4146LQA_S255" />
        </device>
        <device Dname="CY8C4146LQA-S265">
          <compile define="CY8C4146LQA_S265" />
        </device>
        <device Dname="CY8C4146LQA-S275">
          <compile define="CY8C4146LQA_S275" />
        </device>
        <device Dname="CY8C4146LQA-S455">
          <compile define="CY8C4146LQA_S455" />
        </device>
        <device Dname="CY8C4126LQS-S455">
          <compile define="CY8C4126LQS_S455" />
        </device>
        <device Dname="CY8C4146LQS-S245">
          <compile define="CY8C4146LQS_S245" />
        </device>
        <device Dname="CY8C4146LQS-S255">
          <compile define="CY8C4146LQS_S255" />
        </device>
        <device Dname="CY8C4146LQS-S265">
          <compile define="CY8C4146LQS_S265" />
        </device>
        <device Dname="CY8C4146LQS-S275">
          <compile define="CY8C4146LQS_S275" />
        </device>
        <device Dname="CY8C4146LQS-S455">
          <compile define="CY8C4146LQS_S455" />
        </device>
        <device Dname="CY8C4126LQE-S455">
          <compile define="CY8C4126LQE_S455" />
        </device>
        <device Dname="CY8C4146LQE-S245">
          <compile define="CY8C4146LQE_S245" />
        </device>
        <device Dname="CY8C4146LQE-S255">
          <compile define="CY8C4146LQE_S255" />
        </device>
        <device Dname="CY8C4146LQE-S265">
          <compile define="CY8C4146LQE_S265" />
        </device>
        <device Dname="CY8C4146LQE-S275">
          <compile define="CY8C4146LQE_S275" />
        </device>
        <device Dname="CY8C4146LQE-S455">
          <compile define="CY8C4146LQE_S455" />
        </device>
      </subFamily>
      <!-- PSoC 4100S Plus (CY8C41x7xxx-Sxxx): 128KB Flash, 16KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Plus (CY8C41x7xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4127AXI-S443">
          <compile define="CY8C4127AXI_S443" />
        </device>
        <device Dname="CY8C4127AZI-S445">
          <compile define="CY8C4127AZI_S445" />
        </device>
        <device Dname="CY8C4127AXI-S445">
          <compile define="CY8C4127AXI_S445" />
        </device>
        <device Dname="CY8C4127AXI-S453">
          <compile define="CY8C4127AXI_S453" />
        </device>
        <device Dname="CY8C4127AZI-S455">
          <compile define="CY8C4127AZI_S455" />
        </device>
        <device Dname="CY8C4127AXI-S455">
          <compile define="CY8C4127AXI_S455" />
        </device>
        <device Dname="CY8C4147AXI-S443">
          <compile define="CY8C4147AXI_S443" />
        </device>
        <device Dname="CY8C4147AZI-S445">
          <compile define="CY8C4147AZI_S445" />
        </device>
        <device Dname="CY8C4147AXI-S445">
          <compile define="CY8C4147AXI_S445" />
        </device>
        <device Dname="CY8C4147AXI-S453">
          <compile define="CY8C4147AXI_S453" />
        </device>
        <device Dname="CY8C4147AZI-S455">
          <compile define="CY8C4147AZI_S455" />
        </device>
        <device Dname="CY8C4147AXI-S455">
          <compile define="CY8C4147AXI_S455" />
        </device>
        <device Dname="CY8C4147AZI-S465">
          <compile define="CY8C4147AZI_S465" />
        </device>
        <device Dname="CY8C4147AXI-S465">
          <compile define="CY8C4147AXI_S465" />
        </device>
        <device Dname="CY8C4147AZI-S475">
          <compile define="CY8C4147AZI_S475" />
        </device>
        <device Dname="CY8C4147AXI-S475">
          <compile define="CY8C4147AXI_S475" />
        </device>
        <device Dname="CY8C4127AZA-S445">
          <compile define="CY8C4127AZA_S445" />
        </device>
        <device Dname="CY8C4127AZA-S455">
          <compile define="CY8C4127AZA_S455" />
        </device>
        <device Dname="CY8C4147AZA-S445">
          <compile define="CY8C4147AZA_S445" />
        </device>
        <device Dname="CY8C4147AZA-S455">
          <compile define="CY8C4147AZA_S455" />
        </device>
        <device Dname="CY8C4147AZA-S465">
          <compile define="CY8C4147AZA_S465" />
        </device>
        <device Dname="CY8C4147AZA-S475">
          <compile define="CY8C4147AZA_S475" />
        </device>
        <device Dname="CY8C4127AZS-S445">
          <compile define="CY8C4127AZS_S445" />
        </device>
        <device Dname="CY8C4127AZS-S455">
          <compile define="CY8C4127AZS_S455" />
        </device>
        <device Dname="CY8C4147AZS-S445">
          <compile define="CY8C4147AZS_S445" />
        </device>
        <device Dname="CY8C4147AZS-S455">
          <compile define="CY8C4147AZS_S455" />
        </device>
        <device Dname="CY8C4147AZS-S465">
          <compile define="CY8C4147AZS_S465" />
        </device>
        <device Dname="CY8C4147AZS-S475">
          <compile define="CY8C4147AZS_S475" />
        </device>
        <device Dname="CY8C4147AZA-S245">
          <compile define="CY8C4147AZA_S245" />
        </device>
        <device Dname="CY8C4147AZA-S255">
          <compile define="CY8C4147AZA_S255" />
        </device>
        <device Dname="CY8C4147AZA-S265">
          <compile define="CY8C4147AZA_S265" />
        </device>
        <device Dname="CY8C4147AZA-S275">
          <compile define="CY8C4147AZA_S275" />
        </device>
        <device Dname="CY8C4147AZA-S285">
          <compile define="CY8C4147AZA_S285" />
        </device>
        <device Dname="CY8C4147AZA-S295">
          <compile define="CY8C4147AZA_S295" />
        </device>
        <device Dname="CY8C4147AZS-S245">
          <compile define="CY8C4147AZS_S245" />
        </device>
        <device Dname="CY8C4147AZS-S255">
          <compile define="CY8C4147AZS_S255" />
        </device>
        <device Dname="CY8C4147AZS-S265">
          <compile define="CY8C4147AZS_S265" />
        </device>
        <device Dname="CY8C4147AZS-S275">
          <compile define="CY8C4147AZS_S275" />
        </device>
        <device Dname="CY8C4147AZS-S285">
          <compile define="CY8C4147AZS_S285" />
        </device>
        <device Dname="CY8C4147AZS-S295">
          <compile define="CY8C4147AZS_S295" />
        </device>
        <device Dname="CY8C4547AZI-445">
          <compile define="CY8C4547AZI_445" />
        </device>
        <device Dname="CY8C4127AZI-S443">
          <compile define="CY8C4127AZI_S443" />
        </device>
        <device Dname="CY8C4127AZI-S453">
          <compile define="CY8C4127AZI_S453" />
        </device>
        <device Dname="CY8C4147AZI-S443">
          <compile define="CY8C4147AZI_S443" />
        </device>
        <device Dname="CY8C4147AZI-S453">
          <compile define="CY8C4147AZI_S453" />
        </device>
        <device Dname="CY8C4147AZQ-S453">
          <compile define="CY8C4147AZQ_S453" />
        </device>
        <device Dname="CY8C4147AZI-S463">
          <compile define="CY8C4147AZI_S463" />
        </device>
        <device Dname="CY8C4127AZQ-S445">
          <compile define="CY8C4127AZQ_S445" />
        </device>
        <device Dname="CY8C4147AZQ-S445">
          <compile define="CY8C4147AZQ_S445" />
        </device>
        <device Dname="CY8C4127AZQ-S455">
          <compile define="CY8C4127AZQ_S455" />
        </device>
        <device Dname="CY8C4147AZQ-S455">
          <compile define="CY8C4147AZQ_S455" />
        </device>
        <device Dname="CY8C4147AZQ-S465">
          <compile define="CY8C4147AZQ_S465" />
        </device>
        <device Dname="CY8C4147AZQ-S475">
          <compile define="CY8C4147AZQ_S475" />
        </device>
        <device Dname="CY8C4127AZE-S445">
          <compile define="CY8C4127AZE_S445" />
        </device>
        <device Dname="CY8C4127AZE-S455">
          <compile define="CY8C4127AZE_S455" />
        </device>
        <device Dname="CY8C4147AZE-S245">
          <compile define="CY8C4147AZE_S245" />
        </device>
        <device Dname="CY8C4147AZE-S255">
          <compile define="CY8C4147AZE_S255" />
        </device>
        <device Dname="CY8C4147AZE-S265">
          <compile define="CY8C4147AZE_S265" />
        </device>
        <device Dname="CY8C4147AZE-S275">
          <compile define="CY8C4147AZE_S275" />
        </device>
        <device Dname="CY8C4147AZE-S285">
          <compile define="CY8C4147AZE_S285" />
        </device>
        <device Dname="CY8C4147AZE-S295">
          <compile define="CY8C4147AZE_S295" />
        </device>
        <device Dname="CY8C4147AZE-S445">
          <compile define="CY8C4147AZE_S445" />
        </device>
        <device Dname="CY8C4147AZE-S455">
          <compile define="CY8C4147AZE_S455" />
        </device>
        <device Dname="CY8C4147AZE-S465">
          <compile define="CY8C4147AZE_S465" />
        </device>
        <device Dname="CY8C4147AZE-S475">
          <compile define="CY8C4147AZE_S475" />
        </device>
        <device Dname="CY8C4127LQA-S443">
          <compile define="CY8C4127LQA_S443" />
        </device>
        <device Dname="CY8C4127LQA-S453">
          <compile define="CY8C4127LQA_S453" />
        </device>
        <device Dname="CY8C4147LQA-S243">
          <compile define="CY8C4147LQA_S243" />
        </device>
        <device Dname="CY8C4147LQA-S253">
          <compile define="CY8C4147LQA_S253" />
        </device>
        <device Dname="CY8C4147LQA-S263">
          <compile define="CY8C4147LQA_S263" />
        </device>
        <device Dname="CY8C4147LQA-S273">
          <compile define="CY8C4147LQA_S273" />
        </device>
        <device Dname="CY8C4147LQA-S283">
          <compile define="CY8C4147LQA_S283" />
        </device>
        <device Dname="CY8C4147LQA-S293">
          <compile define="CY8C4147LQA_S293" />
        </device>
        <device Dname="CY8C4147LQA-S443">
          <compile define="CY8C4147LQA_S443" />
        </device>
        <device Dname="CY8C4147LQA-S453">
          <compile define="CY8C4147LQA_S453" />
        </device>
        <device Dname="CY8C4147LQA-S463">
          <compile define="CY8C4147LQA_S463" />
        </device>
        <device Dname="CY8C4147LQA-S473">
          <compile define="CY8C4147LQA_S473" />
        </device>
        <device Dname="CY8C4127LQS-S443">
          <compile define="CY8C4127LQS_S443" />
        </device>
        <device Dname="CY8C4127LQS-S453">
          <compile define="CY8C4127LQS_S453" />
        </device>
        <device Dname="CY8C4147LQS-S243">
          <compile define="CY8C4147LQS_S243" />
        </device>
        <device Dname="CY8C4147LQS-S253">
          <compile define="CY8C4147LQS_S253" />
        </device>
        <device Dname="CY8C4147LQS-S263">
          <compile define="CY8C4147LQS_S263" />
        </device>
        <device Dname="CY8C4147LQS-S273">
          <compile define="CY8C4147LQS_S273" />
        </device>
        <device Dname="CY8C4147LQS-S283">
          <compile define="CY8C4147LQS_S283" />
        </device>
        <device Dname="CY8C4147LQS-S293">
          <compile define="CY8C4147LQS_S293" />
        </device>
        <device Dname="CY8C4147LQS-S443">
          <compile define="CY8C4147LQS_S443" />
        </device>
        <device Dname="CY8C4147LQS-S453">
          <compile define="CY8C4147LQS_S453" />
        </device>
        <device Dname="CY8C4147LQS-S463">
          <compile define="CY8C4147LQS_S463" />
        </device>
        <device Dname="CY8C4147LQS-S473">
          <compile define="CY8C4147LQS_S473" />
        </device>
        <device Dname="CY8C4127LQE-S443">
          <compile define="CY8C4127LQE_S443" />
        </device>
        <device Dname="CY8C4127LQE-S453">
          <compile define="CY8C4127LQE_S453" />
        </device>
        <device Dname="CY8C4147LQE-S243">
          <compile define="CY8C4147LQE_S243" />
        </device>
        <device Dname="CY8C4147LQE-S253">
          <compile define="CY8C4147LQE_S253" />
        </device>
        <device Dname="CY8C4147LQE-S263">
          <compile define="CY8C4147LQE_S263" />
        </device>
        <device Dname="CY8C4147LQE-S273">
          <compile define="CY8C4147LQE_S273" />
        </device>
        <device Dname="CY8C4147LQE-S283">
          <compile define="CY8C4147LQE_S283" />
        </device>
        <device Dname="CY8C4147LQE-S293">
          <compile define="CY8C4147LQE_S293" />
        </device>
        <device Dname="CY8C4147LQE-S443">
          <compile define="CY8C4147LQE_S443" />
        </device>
        <device Dname="CY8C4147LQE-S453">
          <compile define="CY8C4147LQE_S453" />
        </device>
        <device Dname="CY8C4147LQE-S463">
          <compile define="CY8C4147LQE_S463" />
        </device>
        <device Dname="CY8C4147LQE-S473">
          <compile define="CY8C4147LQE_S473" />
        </device>
        <device Dname="CY8C4127LQA-S445">
          <compile define="CY8C4127LQA_S445" />
        </device>
        <device Dname="CY8C4127LQA-S455">
          <compile define="CY8C4127LQA_S455" />
        </device>
        <device Dname="CY8C4147LQA-S245">
          <compile define="CY8C4147LQA_S245" />
        </device>
        <device Dname="CY8C4147LQA-S255">
          <compile define="CY8C4147LQA_S255" />
        </device>
        <device Dname="CY8C4147LQA-S265">
          <compile define="CY8C4147LQA_S265" />
        </device>
        <device Dname="CY8C4147LQA-S275">
          <compile define="CY8C4147LQA_S275" />
        </device>
        <device Dname="CY8C4147LQA-S285">
          <compile define="CY8C4147LQA_S285" />
        </device>
        <device Dname="CY8C4147LQA-S295">
          <compile define="CY8C4147LQA_S295" />
        </device>
        <device Dname="CY8C4147LQA-S445">
          <compile define="CY8C4147LQA_S445" />
        </device>
        <device Dname="CY8C4147LQA-S455">
          <compile define="CY8C4147LQA_S455" />
        </device>
        <device Dname="CY8C4147LQA-S465">
          <compile define="CY8C4147LQA_S465" />
        </device>
        <device Dname="CY8C4147LQA-S475">
          <compile define="CY8C4147LQA_S475" />
        </device>
        <device Dname="CY8C4127LQS-S445">
          <compile define="CY8C4127LQS_S445" />
        </device>
        <device Dname="CY8C4127LQS-S455">
          <compile define="CY8C4127LQS_S455" />
        </device>
        <device Dname="CY8C4147LQS-S245">
          <compile define="CY8C4147LQS_S245" />
        </device>
        <device Dname="CY8C4147LQS-S255">
          <compile define="CY8C4147LQS_S255" />
        </device>
        <device Dname="CY8C4147LQS-S265">
          <compile define="CY8C4147LQS_S265" />
        </device>
        <device Dname="CY8C4147LQS-S275">
          <compile define="CY8C4147LQS_S275" />
        </device>
        <device Dname="CY8C4147LQS-S285">
          <compile define="CY8C4147LQS_S285" />
        </device>
        <device Dname="CY8C4147LQS-S295">
          <compile define="CY8C4147LQS_S295" />
        </device>
        <device Dname="CY8C4147LQS-S445">
          <compile define="CY8C4147LQS_S445" />
        </device>
        <device Dname="CY8C4147LQS-S455">
          <compile define="CY8C4147LQS_S455" />
        </device>
        <device Dname="CY8C4147LQS-S465">
          <compile define="CY8C4147LQS_S465" />
        </device>
        <device Dname="CY8C4147LQS-S475">
          <compile define="CY8C4147LQS_S475" />
        </device>
        <device Dname="CY8C4127LQE-S445">
          <compile define="CY8C4127LQE_S445" />
        </device>
        <device Dname="CY8C4127LQE-S455">
          <compile define="CY8C4127LQE_S455" />
        </device>
        <device Dname="CY8C4147LQE-S245">
          <compile define="CY8C4147LQE_S245" />
        </device>
        <device Dname="CY8C4147LQE-S255">
          <compile define="CY8C4147LQE_S255" />
        </device>
        <device Dname="CY8C4147LQE-S265">
          <compile define="CY8C4147LQE_S265" />
        </device>
        <device Dname="CY8C4147LQE-S275">
          <compile define="CY8C4147LQE_S275" />
        </device>
        <device Dname="CY8C4147LQE-S285">
          <compile define="CY8C4147LQE_S285" />
        </device>
        <device Dname="CY8C4147LQE-S295">
          <compile define="CY8C4147LQE_S295" />
        </device>
        <device Dname="CY8C4147LQE-S445">
          <compile define="CY8C4147LQE_S445" />
        </device>
        <device Dname="CY8C4147LQE-S455">
          <compile define="CY8C4147LQE_S455" />
        </device>
        <device Dname="CY8C4147LQE-S465">
          <compile define="CY8C4147LQE_S465" />
        </device>
        <device Dname="CY8C4147LQE-S475">
          <compile define="CY8C4147LQE_S475" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4100SP256KB -->
    <family Dfamily="PSoC 4100S Plus 256KB" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4100S Plus 256KB devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4100sp256kb.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4100S Plus (CY8C41x8xxx-Sxxx): 256KB Flash, 32KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Plus (CY8C41x8xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00040000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4128AZI-S443">
          <compile define="CY8C4128AZI_S443" />
        </device>
        <device Dname="CY8C4128AZI-S445">
          <compile define="CY8C4128AZI_S445" />
        </device>
        <device Dname="CY8C4128AXI-S445">
          <compile define="CY8C4128AXI_S445" />
        </device>
        <device Dname="CY8C4128AZI-S453">
          <compile define="CY8C4128AZI_S453" />
        </device>
        <device Dname="CY8C4128AZI-S455">
          <compile define="CY8C4128AZI_S455" />
        </device>
        <device Dname="CY8C4128AXI-S455">
          <compile define="CY8C4128AXI_S455" />
        </device>
        <device Dname="CY8C4148AZI-S443">
          <compile define="CY8C4148AZI_S443" />
        </device>
        <device Dname="CY8C4148AZI-S445">
          <compile define="CY8C4148AZI_S445" />
        </device>
        <device Dname="CY8C4148AXI-S445">
          <compile define="CY8C4148AXI_S445" />
        </device>
        <device Dname="CY8C4148AZI-S453">
          <compile define="CY8C4148AZI_S453" />
        </device>
        <device Dname="CY8C4148AZI-S455">
          <compile define="CY8C4148AZI_S455" />
        </device>
        <device Dname="CY8C4148AXI-S455">
          <compile define="CY8C4148AXI_S455" />
        </device>
        <device Dname="CY8C4148AZQ-S443">
          <compile define="CY8C4148AZQ_S443" />
        </device>
        <device Dname="CY8C4148AZQ-S445">
          <compile define="CY8C4148AZQ_S445" />
        </device>
        <device Dname="CY8C4148AXQ-S445">
          <compile define="CY8C4148AXQ_S445" />
        </device>
        <device Dname="CY8C4148AZQ-S453">
          <compile define="CY8C4148AZQ_S453" />
        </device>
        <device Dname="CY8C4148AZQ-S455">
          <compile define="CY8C4148AZQ_S455" />
        </device>
        <device Dname="CY8C4148AXQ-S455">
          <compile define="CY8C4148AXQ_S455" />
        </device>
        <device Dname="CY8C4128LQI-S446">
          <compile define="CY8C4128LQI_S446" />
        </device>
        <device Dname="CY8C4128LQQ-S456">
          <compile define="CY8C4128LQQ_S456" />
        </device>
        <device Dname="CY8C4148LQI-S446">
          <compile define="CY8C4148LQI_S446" />
        </device>
        <device Dname="CY8C4148LQQ-S456">
          <compile define="CY8C4148LQQ_S456" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4100SMAX -->
    <family Dfamily="PSoC 4100S Max" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4100S Max devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4100smax.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4100S Max (CY8C4147xxx-Sxxx): 128KB Flash, 16KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Max (CY8C4147xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4147AZE-S598">
          <compile define="CY8C4147AZE_S598" />
        </device>
        <device Dname="CY8C4147AZE-S578">
          <compile define="CY8C4147AZE_S578" />
        </device>
        <device Dname="CY8C4147AZA-S548">
          <compile define="CY8C4147AZA_S548" />
        </device>
        <device Dname="CY8C4147AZE-S548">
          <compile define="CY8C4147AZE_S548" />
        </device>
        <device Dname="CY8C4147AZS-S548">
          <compile define="CY8C4147AZS_S548" />
        </device>
        <device Dname="CY8C4147AZA-S555">
          <compile define="CY8C4147AZA_S555" />
        </device>
        <device Dname="CY8C4147AZS-S555">
          <compile define="CY8C4147AZS_S555" />
        </device>
        <device Dname="CY8C4147AZE-S555">
          <compile define="CY8C4147AZE_S555" />
        </device>
        <device Dname="CY8C4147AZA-S558">
          <compile define="CY8C4147AZA_S558" />
        </device>
        <device Dname="CY8C4147AZS-S558">
          <compile define="CY8C4147AZS_S558" />
        </device>
        <device Dname="CY8C4147AZE-S558">
          <compile define="CY8C4147AZE_S558" />
        </device>
        <device Dname="CY8C4147AZA-S565">
          <compile define="CY8C4147AZA_S565" />
        </device>
        <device Dname="CY8C4147AZS-S565">
          <compile define="CY8C4147AZS_S565" />
        </device>
        <device Dname="CY8C4147AZE-S565">
          <compile define="CY8C4147AZE_S565" />
        </device>
        <device Dname="CY8C4147AZA-S568">
          <compile define="CY8C4147AZA_S568" />
        </device>
        <device Dname="CY8C4147AZS-S568">
          <compile define="CY8C4147AZS_S568" />
        </device>
        <device Dname="CY8C4147AZE-S568">
          <compile define="CY8C4147AZE_S568" />
        </device>
        <device Dname="CY8C4147AZA-S575">
          <compile define="CY8C4147AZA_S575" />
        </device>
        <device Dname="CY8C4147AZS-S575">
          <compile define="CY8C4147AZS_S575" />
        </device>
        <device Dname="CY8C4147AZE-S575">
          <compile define="CY8C4147AZE_S575" />
        </device>
        <device Dname="CY8C4147AZA-S578">
          <compile define="CY8C4147AZA_S578" />
        </device>
        <device Dname="CY8C4147AZS-S578">
          <compile define="CY8C4147AZS_S578" />
        </device>
        <device Dname="CY8C4147AZA-S585">
          <compile define="CY8C4147AZA_S585" />
        </device>
        <device Dname="CY8C4147AZS-S585">
          <compile define="CY8C4147AZS_S585" />
        </device>
        <device Dname="CY8C4147AZE-S585">
          <compile define="CY8C4147AZE_S585" />
        </device>
        <device Dname="CY8C4147AZA-S588">
          <compile define="CY8C4147AZA_S588" />
        </device>
        <device Dname="CY8C4147AZS-S588">
          <compile define="CY8C4147AZS_S588" />
        </device>
        <device Dname="CY8C4147AZE-S588">
          <compile define="CY8C4147AZE_S588" />
        </device>
        <device Dname="CY8C4147AZA-S595">
          <compile define="CY8C4147AZA_S595" />
        </device>
        <device Dname="CY8C4147AZS-S595">
          <compile define="CY8C4147AZS_S595" />
        </device>
        <device Dname="CY8C4147AZE-S595">
          <compile define="CY8C4147AZE_S595" />
        </device>
        <device Dname="CY8C4147AZA-S598">
          <compile define="CY8C4147AZA_S598" />
        </device>
        <device Dname="CY8C4147AZS-S598">
          <compile define="CY8C4147AZS_S598" />
        </device>
        <device Dname="CY8C4147LDA-S543">
          <compile define="CY8C4147LDA_S543" />
        </device>
        <device Dname="CY8C4147LDE-S543">
          <compile define="CY8C4147LDE_S543" />
        </device>
        <device Dname="CY8C4147LDS-S543">
          <compile define="CY8C4147LDS_S543" />
        </device>
        <device Dname="CY8C4147LDA-S553">
          <compile define="CY8C4147LDA_S553" />
        </device>
        <device Dname="CY8C4147LDS-S553">
          <compile define="CY8C4147LDS_S553" />
        </device>
        <device Dname="CY8C4147LDE-S553">
          <compile define="CY8C4147LDE_S553" />
        </device>
        <device Dname="CY8C4147LDA-S563">
          <compile define="CY8C4147LDA_S563" />
        </device>
        <device Dname="CY8C4147LDS-S563">
          <compile define="CY8C4147LDS_S563" />
        </device>
        <device Dname="CY8C4147LDE-S563">
          <compile define="CY8C4147LDE_S563" />
        </device>
        <device Dname="CY8C4147LDA-S573">
          <compile define="CY8C4147LDA_S573" />
        </device>
        <device Dname="CY8C4147LDS-S573">
          <compile define="CY8C4147LDS_S573" />
        </device>
        <device Dname="CY8C4147LDE-S573">
          <compile define="CY8C4147LDE_S573" />
        </device>
        <device Dname="CY8C4147LDA-S583">
          <compile define="CY8C4147LDA_S583" />
        </device>
        <device Dname="CY8C4147LDS-S583">
          <compile define="CY8C4147LDS_S583" />
        </device>
        <device Dname="CY8C4147LDE-S583">
          <compile define="CY8C4147LDE_S583" />
        </device>
        <device Dname="CY8C4147LDA-S593">
          <compile define="CY8C4147LDA_S593" />
        </device>
        <device Dname="CY8C4147LDS-S593">
          <compile define="CY8C4147LDS_S593" />
        </device>
        <device Dname="CY8C4147LDE-S593">
          <compile define="CY8C4147LDE_S593" />
        </device>
      </subFamily>
      <!-- PSoC 4100S Max (CY8C4148xxx-Sxxx): 256KB Flash, 32KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Max (CY8C4148xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00040000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4148AZI-S548">
          <compile define="CY8C4148AZI_S548" />
        </device>
        <device Dname="CY8C4148AZI-S553">
          <compile define="CY8C4148AZI_S553" />
        </device>
        <device Dname="CY8C4148AZI-S555">
          <compile define="CY8C4148AZI_S555" />
        </device>
        <device Dname="CY8C4148AZI-S558">
          <compile define="CY8C4148AZI_S558" />
        </device>
        <device Dname="CY8C4148AZI-S583">
          <compile define="CY8C4148AZI_S583" />
        </device>
        <device Dname="CY8C4148AZI-S585">
          <compile define="CY8C4148AZI_S585" />
        </device>
        <device Dname="CY8C4148AZI-S588">
          <compile define="CY8C4148AZI_S588" />
        </device>
        <device Dname="CY8C4148AZI-S593">
          <compile define="CY8C4148AZI_S593" />
        </device>
        <device Dname="CY8C4148AZI-S595">
          <compile define="CY8C4148AZI_S595" />
        </device>
        <device Dname="CY8C4148AZI-S598">
          <compile define="CY8C4148AZI_S598" />
        </device>
        <device Dname="CY8C4148AZQ-S558">
          <compile define="CY8C4148AZQ_S558" />
        </device>
        <device Dname="CY8C4148AZE-S598">
          <compile define="CY8C4148AZE_S598" />
        </device>
        <device Dname="CY8C4148LDE-S573">
          <compile define="CY8C4148LDE_S573" />
        </device>
        <device Dname="CY8C4148LDE-S593">
          <compile define="CY8C4148LDE_S593" />
        </device>
        <device Dname="CY8C4148AZA-S545">
          <compile define="CY8C4148AZA_S545" />
        </device>
        <device Dname="CY8C4148AZS-S545">
          <compile define="CY8C4148AZS_S545" />
        </device>
        <device Dname="CY8C4148AZE-S545">
          <compile define="CY8C4148AZE_S545" />
        </device>
        <device Dname="CY8C4148AZA-S548">
          <compile define="CY8C4148AZA_S548" />
        </device>
        <device Dname="CY8C4148AZS-S548">
          <compile define="CY8C4148AZS_S548" />
        </device>
        <device Dname="CY8C4148AZE-S548">
          <compile define="CY8C4148AZE_S548" />
        </device>
        <device Dname="CY8C4148AZA-S555">
          <compile define="CY8C4148AZA_S555" />
        </device>
        <device Dname="CY8C4148AZS-S555">
          <compile define="CY8C4148AZS_S555" />
        </device>
        <device Dname="CY8C4148AZE-S555">
          <compile define="CY8C4148AZE_S555" />
        </device>
        <device Dname="CY8C4148AZA-S558">
          <compile define="CY8C4148AZA_S558" />
        </device>
        <device Dname="CY8C4148AZS-S558">
          <compile define="CY8C4148AZS_S558" />
        </device>
        <device Dname="CY8C4148AZE-S558">
          <compile define="CY8C4148AZE_S558" />
        </device>
        <device Dname="CY8C4148AZA-S565">
          <compile define="CY8C4148AZA_S565" />
        </device>
        <device Dname="CY8C4148AZS-S565">
          <compile define="CY8C4148AZS_S565" />
        </device>
        <device Dname="CY8C4148AZE-S565">
          <compile define="CY8C4148AZE_S565" />
        </device>
        <device Dname="CY8C4148AZA-S568">
          <compile define="CY8C4148AZA_S568" />
        </device>
        <device Dname="CY8C4148AZS-S568">
          <compile define="CY8C4148AZS_S568" />
        </device>
        <device Dname="CY8C4148AZE-S568">
          <compile define="CY8C4148AZE_S568" />
        </device>
        <device Dname="CY8C4148AZA-S575">
          <compile define="CY8C4148AZA_S575" />
        </device>
        <device Dname="CY8C4148AZS-S575">
          <compile define="CY8C4148AZS_S575" />
        </device>
        <device Dname="CY8C4148AZE-S575">
          <compile define="CY8C4148AZE_S575" />
        </device>
        <device Dname="CY8C4148AZA-S578">
          <compile define="CY8C4148AZA_S578" />
        </device>
        <device Dname="CY8C4148AZS-S578">
          <compile define="CY8C4148AZS_S578" />
        </device>
        <device Dname="CY8C4148AZE-S578">
          <compile define="CY8C4148AZE_S578" />
        </device>
        <device Dname="CY8C4148AZA-S585">
          <compile define="CY8C4148AZA_S585" />
        </device>
        <device Dname="CY8C4148AZS-S585">
          <compile define="CY8C4148AZS_S585" />
        </device>
        <device Dname="CY8C4148AZE-S585">
          <compile define="CY8C4148AZE_S585" />
        </device>
        <device Dname="CY8C4148AZA-S588">
          <compile define="CY8C4148AZA_S588" />
        </device>
        <device Dname="CY8C4148AZS-S588">
          <compile define="CY8C4148AZS_S588" />
        </device>
        <device Dname="CY8C4148AZE-S588">
          <compile define="CY8C4148AZE_S588" />
        </device>
        <device Dname="CY8C4148AZA-S595">
          <compile define="CY8C4148AZA_S595" />
        </device>
        <device Dname="CY8C4148AZS-S595">
          <compile define="CY8C4148AZS_S595" />
        </device>
        <device Dname="CY8C4148AZE-S595">
          <compile define="CY8C4148AZE_S595" />
        </device>
        <device Dname="CY8C4148AZA-S598">
          <compile define="CY8C4148AZA_S598" />
        </device>
        <device Dname="CY8C4148AZS-S598">
          <compile define="CY8C4148AZS_S598" />
        </device>
        <device Dname="CY8C4148LDA-S543">
          <compile define="CY8C4148LDA_S543" />
        </device>
        <device Dname="CY8C4148LDS-S543">
          <compile define="CY8C4148LDS_S543" />
        </device>
        <device Dname="CY8C4148LDE-S543">
          <compile define="CY8C4148LDE_S543" />
        </device>
        <device Dname="CY8C4148LDA-S553">
          <compile define="CY8C4148LDA_S553" />
        </device>
        <device Dname="CY8C4148LDS-S553">
          <compile define="CY8C4148LDS_S553" />
        </device>
        <device Dname="CY8C4148LDE-S553">
          <compile define="CY8C4148LDE_S553" />
        </device>
        <device Dname="CY8C4148LDA-S563">
          <compile define="CY8C4148LDA_S563" />
        </device>
        <device Dname="CY8C4148LDS-S563">
          <compile define="CY8C4148LDS_S563" />
        </device>
        <device Dname="CY8C4148LDE-S563">
          <compile define="CY8C4148LDE_S563" />
        </device>
        <device Dname="CY8C4148LDA-S573">
          <compile define="CY8C4148LDA_S573" />
        </device>
        <device Dname="CY8C4148LDS-S573">
          <compile define="CY8C4148LDS_S573" />
        </device>
        <device Dname="CY8C4148LDA-S583">
          <compile define="CY8C4148LDA_S583" />
        </device>
        <device Dname="CY8C4148LDS-S583">
          <compile define="CY8C4148LDS_S583" />
        </device>
        <device Dname="CY8C4148LDE-S583">
          <compile define="CY8C4148LDE_S583" />
        </device>
        <device Dname="CY8C4148LDA-S593">
          <compile define="CY8C4148LDA_S593" />
        </device>
        <device Dname="CY8C4148LDS-S593">
          <compile define="CY8C4148LDS_S593" />
        </device>
      </subFamily>
      <!-- PSoC 4100S Max (CY8C4149xxx-Sxxx): 384KB Flash, 32KB SRAM -->
      <subFamily DsubFamily="PSoC 4100S Max (CY8C4149xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00060000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00060000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4149AZI-S545">
          <compile define="CY8C4149AZI_S545" />
        </device>
        <device Dname="CY8C4149AZI-S548">
          <compile define="CY8C4149AZI_S548" />
        </device>
        <device Dname="CY8C4149AZI-S555">
          <compile define="CY8C4149AZI_S555" />
        </device>
        <device Dname="CY8C4149AZI-S558">
          <compile define="CY8C4149AZI_S558" />
        </device>
        <device Dname="CY8C4149AZI-S565">
          <compile define="CY8C4149AZI_S565" />
        </device>
        <device Dname="CY8C4149AZI-S568">
          <compile define="CY8C4149AZI_S568" />
        </device>
        <device Dname="CY8C4149AZI-S575">
          <compile define="CY8C4149AZI_S575" />
        </device>
        <device Dname="CY8C4149AZI-S578">
          <compile define="CY8C4149AZI_S578" />
        </device>
        <device Dname="CY8C4149AZI-S583">
          <compile define="CY8C4149AZI_S583" />
        </device>
        <device Dname="CY8C4149AZI-S585">
          <compile define="CY8C4149AZI_S585" />
        </device>
        <device Dname="CY8C4149AZI-S588">
          <compile define="CY8C4149AZI_S588" />
        </device>
        <device Dname="CY8C4149AZI-S593">
          <compile define="CY8C4149AZI_S593" />
        </device>
        <device Dname="CY8C4149AZI-S595">
          <compile define="CY8C4149AZI_S595" />
        </device>
        <device Dname="CY8C4149AZI-S598">
          <compile define="CY8C4149AZI_S598" />
        </device>
        <device Dname="CY8C4149AZQ-S545">
          <compile define="CY8C4149AZQ_S545" />
        </device>
        <device Dname="CY8C4149AZQ-S548">
          <compile define="CY8C4149AZQ_S548" />
        </device>
        <device Dname="CY8C4149AZQ-S555">
          <compile define="CY8C4149AZQ_S555" />
        </device>
        <device Dname="CY8C4149AZQ-S558">
          <compile define="CY8C4149AZQ_S558" />
        </device>
        <device Dname="CY8C4149AZQ-S593">
          <compile define="CY8C4149AZQ_S593" />
        </device>
        <device Dname="CY8C4149AZQ-S595">
          <compile define="CY8C4149AZQ_S595" />
        </device>
        <device Dname="CY8C4149AZQ-S598">
          <compile define="CY8C4149AZQ_S598" />
        </device>
        <device Dname="CY8C4149AZI-S543">
          <compile define="CY8C4149AZI_S543" />
        </device>
        <device Dname="CY8C4149AZI-S553">
          <compile define="CY8C4149AZI_S553" />
        </device>
        <device Dname="CY8C4149AZA-S545">
          <compile define="CY8C4149AZA_S545" />
        </device>
        <device Dname="CY8C4149AZS-S545">
          <compile define="CY8C4149AZS_S545" />
        </device>
        <device Dname="CY8C4149AZE-S545">
          <compile define="CY8C4149AZE_S545" />
        </device>
        <device Dname="CY8C4149AZA-S548">
          <compile define="CY8C4149AZA_S548" />
        </device>
        <device Dname="CY8C4149AZS-S548">
          <compile define="CY8C4149AZS_S548" />
        </device>
        <device Dname="CY8C4149AZE-S548">
          <compile define="CY8C4149AZE_S548" />
        </device>
        <device Dname="CY8C4149AZA-S555">
          <compile define="CY8C4149AZA_S555" />
        </device>
        <device Dname="CY8C4149AZS-S555">
          <compile define="CY8C4149AZS_S555" />
        </device>
        <device Dname="CY8C4149AZE-S555">
          <compile define="CY8C4149AZE_S555" />
        </device>
        <device Dname="CY8C4149AZA-S558">
          <compile define="CY8C4149AZA_S558" />
        </device>
        <device Dname="CY8C4149AZS-S558">
          <compile define="CY8C4149AZS_S558" />
        </device>
        <device Dname="CY8C4149AZE-S558">
          <compile define="CY8C4149AZE_S558" />
        </device>
        <device Dname="CY8C4149AZA-S565">
          <compile define="CY8C4149AZA_S565" />
        </device>
        <device Dname="CY8C4149AZS-S565">
          <compile define="CY8C4149AZS_S565" />
        </device>
        <device Dname="CY8C4149AZE-S565">
          <compile define="CY8C4149AZE_S565" />
        </device>
        <device Dname="CY8C4149AZA-S568">
          <compile define="CY8C4149AZA_S568" />
        </device>
        <device Dname="CY8C4149AZS-S568">
          <compile define="CY8C4149AZS_S568" />
        </device>
        <device Dname="CY8C4149AZE-S568">
          <compile define="CY8C4149AZE_S568" />
        </device>
        <device Dname="CY8C4149AZA-S575">
          <compile define="CY8C4149AZA_S575" />
        </device>
        <device Dname="CY8C4149AZS-S575">
          <compile define="CY8C4149AZS_S575" />
        </device>
        <device Dname="CY8C4149AZE-S575">
          <compile define="CY8C4149AZE_S575" />
        </device>
        <device Dname="CY8C4149AZA-S578">
          <compile define="CY8C4149AZA_S578" />
        </device>
        <device Dname="CY8C4149AZS-S578">
          <compile define="CY8C4149AZS_S578" />
        </device>
        <device Dname="CY8C4149AZE-S578">
          <compile define="CY8C4149AZE_S578" />
        </device>
        <device Dname="CY8C4149AZA-S585">
          <compile define="CY8C4149AZA_S585" />
        </device>
        <device Dname="CY8C4149AZS-S585">
          <compile define="CY8C4149AZS_S585" />
        </device>
        <device Dname="CY8C4149AZE-S585">
          <compile define="CY8C4149AZE_S585" />
        </device>
        <device Dname="CY8C4149AZA-S588">
          <compile define="CY8C4149AZA_S588" />
        </device>
        <device Dname="CY8C4149AZS-S588">
          <compile define="CY8C4149AZS_S588" />
        </device>
        <device Dname="CY8C4149AZE-S588">
          <compile define="CY8C4149AZE_S588" />
        </device>
        <device Dname="CY8C4149AZA-S595">
          <compile define="CY8C4149AZA_S595" />
        </device>
        <device Dname="CY8C4149AZS-S595">
          <compile define="CY8C4149AZS_S595" />
        </device>
        <device Dname="CY8C4149AZE-S595">
          <compile define="CY8C4149AZE_S595" />
        </device>
        <device Dname="CY8C4149AZA-S598">
          <compile define="CY8C4149AZA_S598" />
        </device>
        <device Dname="CY8C4149AZS-S598">
          <compile define="CY8C4149AZS_S598" />
        </device>
        <device Dname="CY8C4149AZE-S598">
          <compile define="CY8C4149AZE_S598" />
        </device>
        <device Dname="CY8C4149LDA-S543">
          <compile define="CY8C4149LDA_S543" />
        </device>
        <device Dname="CY8C4149LDS-S543">
          <compile define="CY8C4149LDS_S543" />
        </device>
        <device Dname="CY8C4149LDE-S543">
          <compile define="CY8C4149LDE_S543" />
        </device>
        <device Dname="CY8C4149LDA-S553">
          <compile define="CY8C4149LDA_S553" />
        </device>
        <device Dname="CY8C4149LDS-S553">
          <compile define="CY8C4149LDS_S553" />
        </device>
        <device Dname="CY8C4149LDE-S553">
          <compile define="CY8C4149LDE_S553" />
        </device>
        <device Dname="CY8C4149LDA-S563">
          <compile define="CY8C4149LDA_S563" />
        </device>
        <device Dname="CY8C4149LDS-S563">
          <compile define="CY8C4149LDS_S563" />
        </device>
        <device Dname="CY8C4149LDE-S563">
          <compile define="CY8C4149LDE_S563" />
        </device>
        <device Dname="CY8C4149LDA-S573">
          <compile define="CY8C4149LDA_S573" />
        </device>
        <device Dname="CY8C4149LDS-S573">
          <compile define="CY8C4149LDS_S573" />
        </device>
        <device Dname="CY8C4149LDE-S573">
          <compile define="CY8C4149LDE_S573" />
        </device>
        <device Dname="CY8C4149LDA-S583">
          <compile define="CY8C4149LDA_S583" />
        </device>
        <device Dname="CY8C4149LDS-S583">
          <compile define="CY8C4149LDS_S583" />
        </device>
        <device Dname="CY8C4149LDE-S583">
          <compile define="CY8C4149LDE_S583" />
        </device>
        <device Dname="CY8C4149LDA-S593">
          <compile define="CY8C4149LDA_S593" />
        </device>
        <device Dname="CY8C4149LDS-S593">
          <compile define="CY8C4149LDS_S593" />
        </device>
        <device Dname="CY8C4149LDE-S593">
          <compile define="CY8C4149LDE_S593" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4500S -->
    <family Dfamily="PSoC 4500S" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4500S devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <debug Pname="Cortex-M0p" svd="SVD/psoc4100sp256kb.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4500S (CY8C45x6xxx-Sxxx): 64KB Flash, 16KB SRAM -->
      <subFamily DsubFamily="PSoC 4500S (CY8C45x6xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4546AZI-S473">
          <compile define="CY8C4546AZI_S473" />
        </device>
        <device Dname="CY8C4546AZI-S475">
          <compile define="CY8C4546AZI_S475" />
        </device>
        <device Dname="CY8C4546AXI-S475">
          <compile define="CY8C4546AXI_S475" />
        </device>
        <device Dname="CY8C4546LQI-S476">
          <compile define="CY8C4546LQI_S476" />
        </device>
        <device Dname="CY8C4546LQQ-S476">
          <compile define="CY8C4546LQQ_S476" />
        </device>
      </subFamily>
      <!-- PSoC 4500S (CY8C45x7xxx-Sxxx): 128KB Flash, 32KB SRAM -->
      <subFamily DsubFamily="PSoC 4500S (CY8C45x7xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4547AZI-S453">
          <compile define="CY8C4547AZI_S453" />
        </device>
        <device Dname="CY8C4547AZI-S455">
          <compile define="CY8C4547AZI_S455" />
        </device>
        <device Dname="CY8C4547AZI-S463">
          <compile define="CY8C4547AZI_S463" />
        </device>
        <device Dname="CY8C4547AZI-S465">
          <compile define="CY8C4547AZI_S465" />
        </device>
        <device Dname="CY8C4547AZI-S473">
          <compile define="CY8C4547AZI_S473" />
        </device>
        <device Dname="CY8C4547AZI-S475">
          <compile define="CY8C4547AZI_S475" />
        </device>
        <device Dname="CY8C4547AXI-S475">
          <compile define="CY8C4547AXI_S475" />
        </device>
        <device Dname="CY8C4547AZQ-S453">
          <compile define="CY8C4547AZQ_S453" />
        </device>
        <device Dname="CY8C4547AZQ-S455">
          <compile define="CY8C4547AZQ_S455" />
        </device>
        <device Dname="CY8C4547AZQ-S473">
          <compile define="CY8C4547AZQ_S473" />
        </device>
        <device Dname="CY8C4547AZQ-S475">
          <compile define="CY8C4547AZQ_S475" />
        </device>
        <device Dname="CY8C4547AXQ-S475">
          <compile define="CY8C4547AXQ_S475" />
        </device>
        <device Dname="CY8C4547LQI-S476">
          <compile define="CY8C4547LQI_S476" />
        </device>
        <device Dname="CY8C4547LQQ-S476">
          <compile define="CY8C4547LQQ_S476" />
        </device>
      </subFamily>
      <!-- PSoC 4500S (CY8C45x8xxx-Sxxx): 256KB Flash, 32KB SRAM -->
      <subFamily DsubFamily="PSoC 4500S (CY8C45x8xxx-Sxxx)">
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00008000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00040000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00040000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4548AZI-S475">
          <compile define="CY8C4548AZI_S475" />
        </device>
        <device Dname="CY8C4548AXI-S475">
          <compile define="CY8C4548AXI_S475" />
        </device>
        <device Dname="CY8C4548AZI-S483">
          <compile define="CY8C4548AZI_S483" />
        </device>
        <device Dname="CY8C4548AZI-S485">
          <compile define="CY8C4548AZI_S485" />
        </device>
        <device Dname="CY8C4548AXI-S485">
          <compile define="CY8C4548AXI_S485" />
        </device>
        <device Dname="CY8C4548AZQ-S483">
          <compile define="CY8C4548AZQ_S483" />
        </device>
        <device Dname="CY8C4548AZQ-S485">
          <compile define="CY8C4548AZQ_S485" />
        </device>
        <device Dname="CY8C4548AXQ-S485">
          <compile define="CY8C4548AXQ_S485" />
        </device>
        <device Dname="CY8C4548LQI-S486">
          <compile define="CY8C4548LQI_S486" />
        </device>
        <device Dname="CY8C4548LQQ-S486">
          <compile define="CY8C4548LQQ_S486" />
        </device>
      </subFamily>
    </family>
    <!-- PSoC 4700S -->
    <family Dfamily="PSoC 4700S" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0p" Dcore="Cortex-M0+" DcoreVersion="r0p1" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>PSoC 4700S devices.</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <book name="known_issues.txt" title="Infineon CAT2 DFP known issues" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <!-- PSoC 4700S (CY8C47x4xxx-S4xx): 16KB Flash, 2KB SRAM -->
      <subFamily DsubFamily="PSoC 4700S (CY8C47x4xxx-S4xx)">
        <debug Pname="Cortex-M0p" svd="SVD/psoc4000s.svd" />
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00000800" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00004000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00004000" RAMstart="0x20000000" RAMsize="0x00000800" default="1" style="Keil" />
        <device Dname="CY8C4724FNI-S402">
          <compile define="CY8C4724FNI_S402" />
        </device>
        <device Dname="CY8C4724LQI-S401">
          <compile define="CY8C4724LQI_S401" />
        </device>
        <device Dname="CY8C4744FNI-S402">
          <compile define="CY8C4744FNI_S402" />
        </device>
        <device Dname="CY8C4744LQI-S401">
          <compile define="CY8C4744LQI_S401" />
        </device>
        <device Dname="CY8C4744AZI-S403">
          <compile define="CY8C4744AZI_S403" />
        </device>
      </subFamily>
      <!-- PSoC 4700S (CY8C47x5xxx-S4xx): 32KB Flash, 4KB SRAM -->
      <subFamily DsubFamily="PSoC 4700S (CY8C47x5xxx-S4xx)">
        <debug Pname="Cortex-M0p" svd="SVD/psoc4000s.svd" />
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00001000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00008000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00008000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4725FNI-S402">
          <compile define="CY8C4725FNI_S402" />
        </device>
        <device Dname="CY8C4725LQI-S401">
          <compile define="CY8C4725LQI_S401" />
        </device>
        <device Dname="CY8C4745FNI-S402">
          <compile define="CY8C4745FNI_S402" />
        </device>
        <device Dname="CY8C4745LQI-S401">
          <compile define="CY8C4745LQI_S401" />
        </device>
        <device Dname="CY8C4745AZI-S403">
          <compile define="CY8C4745AZI_S403" />
        </device>
        <device Dname="CY8C4745FNI-S412">
          <compile define="CY8C4745FNI_S412" />
        </device>
        <device Dname="CY8C4745LQI-S411">
          <compile define="CY8C4745LQI_S411" />
        </device>
        <device Dname="CY8C4745AZI-S413">
          <compile define="CY8C4745AZI_S413" />
        </device>
      </subFamily>
      <!-- PSoC 4700S (CY8C47x6xxx-Sxxx): 64KB Flash, 8KB SRAM -->
      <subFamily DsubFamily="PSoC 4700S (CY8C47x6xxx-Sxxx)">
        <debug Pname="Cortex-M0p" svd="SVD/psoc4100sp.svd" />
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00002000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00010000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00010000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4746LQS-S263">
          <compile define="CY8C4746LQS_S263" />
        </device>
      </subFamily>
      <!-- PSoC 4700S (CY8C47x7xxx-Sxxx): 128KB Flash, 16KB SRAM -->
      <subFamily DsubFamily="PSoC 4700S (CY8C47x7xxx-Sxxx)">
        <debug Pname="Cortex-M0p" svd="SVD/psoc4100sp.svd" />
        <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
        <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
        <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
        <device Dname="CY8C4747LQS-S453">
          <compile define="CY8C4747LQS_S453" />
        </device>
      </subFamily>
    </family>
    <!-- WLC1 (WLC1XXX): 128KB Flash, 16KB SRAM -->
    <family Dfamily="WLC" Dvendor="Infineon:7">
      <processor Pname="Cortex-M0" Dcore="Cortex-M0" DcoreVersion="r0p0" Dfpu="NO_FPU" Dmpu="NO_MPU" Dendian="Little-endian" Dclock="48000000" />
      <description>WLC1 devices</description>
      <book name="README.txt" title="Infineon CAT2 DFP user guide" />
      <debug Pname="Cortex-M0" svd="SVD/ccg7d.svd" />
      <sequences>
        <sequence name="ResetSystem">
          <block>
            // System Control Space (SCS) offset as defined in Armv6-M/Armv7-M.
            __var SCS_Addr   = 0xE000E000;
            __var AIRCR_Addr = SCS_Addr + 0xD0C;
            __var DHCSR_Addr = SCS_Addr + 0xDF0;
            __var DEMCR_Addr = SCS_Addr + 0xDFC;

            // Clear Reset Vector Catch bit set in ResetSetCatch (done so as not to redefine the default ResetSetCatch)
            Write32(DEMCR_Addr, (Read32(DEMCR_Addr) &amp; 0xFFFFFFFE));

            // Map the address bits to the breakpoint compare register
            // bit map, set the enable breakpoint bit, and the match bits
            __var reset_addr = (Read32(0x00000004) &amp; 0x1FFFFFFC) | 0x40000001;
            Write32(0xE0002008, reset_addr);

            // Enable Breakpoint unit
            Write32(0xE0002000, 0x00000003);

            // Issue software reset
            __errorcontrol = 1;
            Write32(AIRCR_Addr, 0x05FA0004);
            __errorcontrol = 0;

            // Wait 100ms to omit the DHCSR register reading until the device is ready
            DAP_Delay(100000);
          </block>
          <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
          <control while="(Read32(DHCSR_Addr) &amp; 0x02000000)" timeout="5000" />
        </sequence>
        <sequence name="ResetHardware">
          <block>
            __var nReset      = 0x80;
            __var canReadPins = 0;

            // De-assert nRESET line
            canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
          </block>
          <!-- Keep reset active for 50 ms -->
          <control while="1" timeout="50000" />
          <control if="canReadPins">
            <!-- Assert nRESET line and wait max. 1s for recovery -->
            <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000" />
          </control>
          <control if="!canReadPins">
            <block>
              // Assert nRESET line
              DAP_SWJ_Pins(nReset, nReset, 0);
            </block>
            <!-- Wait 100ms for recovery if nRESET not readable -->
            <control while="1" timeout="100000" />
          </control>
        </sequence>
        <!-- Does not unlock device. Reused for reading and printing device info -->
        <sequence name="DebugDeviceUnlock">
          <block>
            __var siId;
            __var siRev;
            __var siFamily;
            __var protection;
            __var v;
            __errorcontrol = 1;
            __var is_protected = Read32(0xE000ED00);
          </block>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <control if="is_protected == 1">
            <block>
              is_protected = Read32(0xE000ED00);
            </block>
          </control>
          <block>
            __errorcontrol = 0;
          </block>
          <control if="is_protected == 1">
            <block>
              Message(0, "****************************************************");
              Message(0, "** Chip Protection: PROTECTED");
              Message(0, "****************************************************");
            </block>
          </control>
          <control if="is_protected != 1">
            <block>
              __var prot_offset;
              __var siid_offset;
              __var is_legacy = 0;
              __var geometry_address = 0x40110000;
              __var sflash_address = 0x0FFFF000;
              __var pid_0 = Read32(0xF0000FE0);
              __var pid_1 = Read32(0xF0000FE4);
              __var pid_2 = Read32(0xF0000FE8);
              __var pid_3 = Read32(0xF0000FEC);
              siFamily = pid_0 + ((pid_1 &amp; 0xFu) &lt;&lt; 8);
              siRev = (pid_2 &amp; 0xF0) + ((pid_3 &amp; 0xF0) &gt;&gt; 4);
            </block>
            <control if="(((siFamily&gt;=0x92) &amp;&amp; (siFamily&lt;0x97)) || siFamily==0x98 || siFamily==0x99 || siFamily==0x9C)">
              <block>
                is_legacy = 1;
              </block>
            </control>
            <control if="siFamily==0xBE">
              <block>
                sflash_address = 0x0FFFE000;
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                geometry_address = 0x400E0000;
              </block>
            </control>
            <!-- Get row size -->
            <block>
              v = Read32(geometry_address);
            </block>
            <control if="is_legacy==0">
              <block>
                v = (v &gt;&gt; 22) &amp; 0x03;
                v = 64 * (v + 1);
              </block>
            </control>
            <control if="is_legacy==1">
              <block>
                v = v * 128;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 64 -->
            <control if="v == 0x40">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 128 -->
            <control if="v == 0x80">
              <block>
                siid_offset = 0x0144;
                prot_offset = 0x7C;
              </block>
            </control>
            <!-- Define silicon ID and protection offesets for 256 -->
            <control if="v == 0x100">
              <block>
                siid_offset = 0x244;
                prot_offset = 0x0FC;
              </block>
            </control>
            <!-- Read Silicon ID and protection values -->
            <block>
              siId = Read32(siid_offset|sflash_address);
              protection = Read32(prot_offset|sflash_address);
              Message(0, "****************************************************");
              Message(0, "** Silicon: 0x%04X, Family: 0x%02X, Rev.: 0x%02X", siId, siFamily, siRev);
            </block>
            <!-- Decode life-cycle stage -->
            <control if="protection == 0">
              <block>
                Message(0, "** Chip Protection: OPEN");
              </block>
            </control>
            <control if="protection == 1">
              <block>
                Message(0, "** Chip Protection: VIRGIN");
              </block>
            </control>
            <control if="(protection &gt; 1)">
              <block>
                Message(0, "** Chip Protection: UNKNOWN");
              </block>
            </control>
            <block>
              Message(0, "****************************************************");
            </block>
          </control>
        </sequence>
      </sequences>
      <memory name="IRAM1" access="rwx" start="0x20000000" size="0x00004000" default="1" />
      <memory name="IROM1" access="rx" start="0x00000000" size="0x00020000" default="1" startup="1" />
      <algorithm name="Flash/CAT2.FLM" start="0x00000000" size="0x00020000" RAMstart="0x20000300" RAMsize="0x00000D00" default="1" style="Keil" />
      <device Dname="WLC1115-68LQXQ">
        <compile define="WLC1115_68LQXQ" />
      </device>
      <device Dname="WLC1150-68LQXQ">
        <compile define="WLC1150_68LQXQ" />
      </device>
      <device Dname="WLC1250-68LQXQ">
        <compile define="WLC1250_68LQXQ" />
      </device>
      <device Dname="WLC1515-68LDXS">
        <compile define="WLC1515_68LDXS" />
      </device>
    </family>
  </devices>
  <conditions>
    <condition id="CCG7S">
      <description>CCG7S devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPD7191-40LDXS" />
      <accept Dvendor="Infineon:7" Dname="CYPD7171-40LQXQ" />
      <accept Dvendor="Infineon:7" Dname="CYPD7199-40LDXS" />
    </condition>
    <condition id="CCG7D">
      <description>CCG7D devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPD7291-68LDXS" />
      <accept Dvendor="Infineon:7" Dname="CYPD7299-68LDXS" />
      <accept Dvendor="Infineon:7" Dname="CYPD7271-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="CYPD7272-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="CYPD7273-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="CYPD7274-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="CYPD7275-68LQXQ" />
    </condition>
    <condition id="CCG8">
      <description>CCG8 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPD8225-97BZXIT" />
      <accept Dvendor="Infineon:7" Dname="CYPD8125-48LDXI" />
    </condition>
    <condition id="PMG1-B1">
      <description>PMG1-B1 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPM1115-48LQXI" />
      <accept Dvendor="Infineon:7" Dname="CYPM1116-48LQXI" />
    </condition>
    <condition id="PMG1-S0">
      <description>PMG1-S0 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPM1011-24LQXI" />
    </condition>
    <condition id="PMG1-S1">
      <description>PMG1-S1 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPM1111-40LQXIT" />
    </condition>
    <condition id="PMG1-S2">
      <description>PMG1-S2 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPM1211-40LQXIT" />
      <accept Dvendor="Infineon:7" Dname="CYPM1211-42FNXIT" />
    </condition>
    <condition id="PMG1-S3">
      <description>PMG1-S3 devices</description>
      <accept Dvendor="Infineon:7" Dname="CYPM1322-97BZXIT" />
      <accept Dvendor="Infineon:7" Dname="CYPM1311-48LQXI" />
      <accept Dvendor="Infineon:7" Dname="CYPM1321-97BZXIT" />
    </condition>
    <condition id="PSoC 4000S">
      <description>PSoC 4000S devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4024FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024AZI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024FNI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AZI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025FNI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045FNI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQI-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024PVA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024PVA-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025PVA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025PVA-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045PVA-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045PVA-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024LQS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024PVS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024PVS-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025PVS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025PVS-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045PVS-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045PVS-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024AXI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024AXI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AXI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AXI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045AXI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AZQ-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4024AZQ-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025AZQ-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045AZQ-S413" />
    </condition>
    <condition id="PSoC 4000T">
      <description>PSoC 4000T devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025LQI-T411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4025FNI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045LQI-T411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4045FNI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4026LQI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4026LQI-T411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4026FNI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046LQI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046LQI-T411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046FNI-T412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046LQI-T452" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046LQI-T451" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046FNI-T452" />
      <accept Dvendor="Infineon:7" Dname="CY8C4046LQIN-T451" />
    </condition>
    <condition id="PSoC 4100S">
      <description>PSoC 4100S devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4124FNI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124FNI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124FNI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124FNQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQI-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124AZI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125FNI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AZI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125FNI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125FNI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125FNQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AZI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146FNI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQI-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146FNI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146FNQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQI-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146FNI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AXI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AXI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4145AZI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4145AXI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4145AXI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVA-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQA-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVA-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQA-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQA-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVA-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQA-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVA-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQA-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVA-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVA-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVS-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQS-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVS-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQS-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVS-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQS-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVS-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQS-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVS-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVS-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVE-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQE-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVE-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQE-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVE-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQE-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVE-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQE-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVE-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146PVE-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVA-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVA-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVS-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVS-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124PVE-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125PVE-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQA-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQS-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQS-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4124LQE-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQE-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZQ-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZQ-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125AZQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4145AZQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4145AXQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXQ-S423" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXQ-S433" />
      <accept Dvendor="Infineon:7" Dname="CY8C4125LQQ-S432" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQQ-S422" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQQ-S432" />
    </condition>
    <condition id="PSoC 4100S Plus">
      <description>PSoC 4100S Plus devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZA-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZA-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZA-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZA-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZS-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZS-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZS-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZS-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZI-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZQ-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126AZE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZE-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZE-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZE-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZE-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146AZE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQA-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQS-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQE-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4126LQE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4146LQE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AXI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AXI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AXI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZA-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZS-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZQ-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZI-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZQ-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZQ-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZQ-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZQ-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZE-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127AZE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQA-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQA-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S283" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S293" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQS-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQS-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S283" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S293" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQE-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQE-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S243" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S253" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S273" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S283" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S293" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQA-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQA-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQS-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQS-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQE-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4127LQE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S245" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S255" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S265" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S275" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S285" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S295" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LQE-S475" />
    </condition>
    <condition id="PSoC 4100S Plus 256KB">
      <description>PSoC 4100S Plus 256KB devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4128AZI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AXI-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AXI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZQ-S443" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZQ-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AXQ-S445" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZQ-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AXQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128LQI-S446" />
      <accept Dvendor="Infineon:7" Dname="CY8C4128LQQ-S456" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LQI-S446" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LQQ-S456" />
    </condition>
    <condition id="PSoC 4100S Max">
      <description>PSoC 4100S Max devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZI-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZQ-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZQ-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZI-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZE-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZA-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147AZS-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZE-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZA-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148AZS-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S545" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S548" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S555" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S558" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S565" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S568" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S575" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S578" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S585" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S588" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S595" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZA-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZS-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149AZE-S598" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDA-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDS-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4147LDE-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDE-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDA-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4148LDS-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S543" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S553" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S563" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S573" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S583" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDA-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDS-S593" />
      <accept Dvendor="Infineon:7" Dname="CY8C4149LDE-S593" />
    </condition>
    <condition id="PSoC 4500S">
      <description>PSoC 4500S devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4546AZI-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4546AZI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4546AXI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S463" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S465" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AXI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AZI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AXI-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AZI-S483" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AZI-S485" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AXI-S485" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZQ-S453" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZQ-S455" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZQ-S473" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AZQ-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547AXQ-S475" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AZQ-S483" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AZQ-S485" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548AXQ-S485" />
      <accept Dvendor="Infineon:7" Dname="CY8C4546LQI-S476" />
      <accept Dvendor="Infineon:7" Dname="CY8C4546LQQ-S476" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547LQI-S476" />
      <accept Dvendor="Infineon:7" Dname="CY8C4547LQQ-S476" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548LQI-S486" />
      <accept Dvendor="Infineon:7" Dname="CY8C4548LQQ-S486" />
    </condition>
    <condition id="PSoC 4700S">
      <description>PSoC 4700S devices</description>
      <accept Dvendor="Infineon:7" Dname="CY8C4724FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4724LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4744FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4744LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4744AZI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4725FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4725LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745FNI-S402" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745LQI-S401" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745AZI-S403" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745FNI-S412" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745LQI-S411" />
      <accept Dvendor="Infineon:7" Dname="CY8C4745AZI-S413" />
      <accept Dvendor="Infineon:7" Dname="CY8C4746LQS-S263" />
      <accept Dvendor="Infineon:7" Dname="CY8C4747LQS-S453" />
    </condition>
    <condition id="WLC1">
      <description>WLC1 devices</description>
      <accept Dvendor="Infineon:7" Dname="WLC1115-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="WLC1150-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="WLC1250-68LQXQ" />
      <accept Dvendor="Infineon:7" Dname="WLC1515-68LDXS" />
    </condition>
    <condition id="CAT2">
      <description>CAT2 devices</description>
      <accept condition="CCG7S" />
      <accept condition="CCG7D" />
      <accept condition="CCG8" />
      <accept condition="PMG1-B1" />
      <accept condition="PMG1-S0" />
      <accept condition="PMG1-S1" />
      <accept condition="PMG1-S2" />
      <accept condition="PMG1-S3" />
      <accept condition="PSoC 4000S" />
      <accept condition="PSoC 4000T" />
      <accept condition="PSoC 4100S" />
      <accept condition="PSoC 4100S Plus" />
      <accept condition="PSoC 4100S Plus 256KB" />
      <accept condition="PSoC 4100S Max" />
      <accept condition="PSoC 4500S" />
      <accept condition="PSoC 4700S" />
      <accept condition="WLC1" />
      <require Cclass="Device" Cgroup="Startup" />
    </condition>
  </conditions>
  <components>
    <component Cclass="Device" Cgroup="Startup" Cversion="1.0.0" condition="CAT2">
      <!-- This is a dummy startup implementation that emits a compiler error once
           this software component is enabled in the CMSIS RTE project configuration.
           It exists to silence PackChk WARNING M350: No 'Startup' component found.
           Refer to README.txt in the pack root directory for the guidance on the
           intended use of this CSMIS pack. -->
      <description>Dummy startup component, do not use</description>
      <files>
        <file category="doc" name="README.txt" />
        <file category="source" name="Device/Source/startup_error.c" version="1.0.0" />
      </files>
    </component>
  </components>
</package>